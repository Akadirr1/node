<%- include('partials/header')%>

	<div class="booking-container">
		<div class="container-fluid">
			<!-- Barber Selection Step -->
			<div id="barberSelection">
				<h1 class="section-title">Berber Seçin</h1>

				<!-- Loading Spinner for Barbers -->
				<div id="barberLoading" class="text-center">
					<div class="spinner-border" role="status">
						<span class="sr-only">Yükleniyor...</span>
					</div>
				</div>

				<!-- Error Message for Barbers -->
				<div id="barberErrorMessage" class="error-message" style="display: none;"></div>

				<!-- Barbers Grid -->
				<div id="barbersGrid" class="barbers-grid" style="display: none;">
					<!-- Barber cards will be inserted here -->
				</div>
			</div>

			<!-- Service Selection Step -->
			<div id="serviceSelection" style="display: none;">
				<button class="btn btn-secondary mb-3" onclick="goBackToBarberSelection()">
					<i class="fas fa-arrow-left"></i> Berbere Geri Dön
				</button>
				<h1 class="section-title">Hizmet Seçin</h1>
				<div class="selected-barber-info">
					<h5>Seçilen Berber: <span id="selectedBarberName"></span></h5>
				</div>

				<!-- Loading Spinner for Services -->
				<div id="serviceLoading" class="text-center">
					<div class="spinner-border" role="status">
						<span class="sr-only">Yükleniyor...</span>
					</div>
				</div>

				<!-- Error Message for Services -->
				<div id="serviceErrorMessage" class="error-message" style="display: none;"></div>

				<!-- Services Grid -->
				<div id="servicesGrid" class="services-grid" style="display: none;">
					<!-- Service cards will be inserted here -->
				</div>
			</div>

			<!-- Calendar Step -->
			<div id="calendarSelection" style="display: none;">
				<button class="btn btn-secondary mb-3" onclick="goBackToServiceSelection()">
					<i class="fas fa-arrow-left"></i> Hizmete Geri Dön
				</button>
				<h2 class="text-center mb-4">Tarih Seçin</h2>
				<div class="selected-info">
					<div class="row">
						<div class="col-md-4">
							<strong>Berber:</strong> <span id="selectedBarberNameCalendar"></span>
						</div>
						<div class="col-md-4">
							<strong>Hizmet:</strong> <span id="selectedServiceNameCalendar"></span>
						</div>
						<div class="col-md-2">
							<strong>Süre:</strong> <span id="selectedServiceDurationCalendar"></span> dk
						</div>
						<div class="col-md-2">
							<strong>Fiyat:</strong> <span id="selectedServicePriceCalendar"></span>₺
						</div>
					</div>
				</div>

				<div class="row">
					<div class="col-md-8">
						<div class="card">
							<div class="card-header d-flex justify-content-between align-items-center">
								<button class="btn btn-outline-primary" onclick="previousMonth()">
									<i class="fas fa-chevron-left"></i>
								</button>
								<h5 id="calendarTitle" class="mb-0"></h5>
								<button class="btn btn-outline-primary" onclick="nextMonth()">
									<i class="fas fa-chevron-right"></i>
								</button>
							</div>
							<div class="card-body">
								<div class="calendar">
									<div class="calendar-header">
										<div class="day-header">Pzt</div>
										<div class="day-header">Sal</div>
										<div class="day-header">Çar</div>
										<div class="day-header">Per</div>
										<div class="day-header">Cum</div>
										<div class="day-header">Cmt</div>
										<div class="day-header">Paz</div>
									</div>
									<div id="calendarDays" class="calendar-days">
										<!-- Calendar days will be inserted here -->
									</div>
								</div>
							</div>
						</div>
					</div>
					<div class="col-md-4">
						<div class="card">
							<div class="card-header">
								<h5 class="mb-0">Müsait Saatler</h5>
								<small id="selectedDateDisplay" class="text-muted"></small>
							</div>
							<div class="card-body">
								<div id="availableHours">
									<p class="text-muted">Lütfen bir tarih seçin</p>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<style>
		.booking-container {
			background-color: #1a1a1a;
			min-height: 100vh;
			padding: 60px 0;
		}

		.section-title {
			color: #8bc34a;
			font-size: 48px;
			font-weight: 600;
			text-align: left;
			margin-bottom: 50px;
			padding-left: 40px;
		}

		.barbers-grid {
			display: flex;
			flex-direction: row;
			gap: 30px;
			flex-wrap: wrap;
			justify-content: flex-start;
			align-items: stretch;
			padding: 0 40px;
			max-width: 1400px;
			margin: 0 auto;
		}

		.services-grid {
			display: flex;
			flex-direction: row;
			gap: 30px;
			flex-wrap: wrap;
			justify-content: flex-start;
			align-items: stretch;
			padding: 0 40px;
			max-width: 1400px;
			margin: 0 auto;
		}

		.service-card {
			background: #2d2d2d;
			border-radius: 12px;
			padding: 30px;
			width: 400px;
			min-width: 350px;
			max-width: 450px;
			flex: 1 1 auto;
			text-align: center;
			transition: transform 0.3s ease, box-shadow 0.3s ease;
			border: 1px solid #4a4a4a;
			display: flex;
			flex-direction: column;
			justify-content: space-between;
		}

		.service-card:hover {
			transform: translateY(-5px);
			box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
		}

		.service-content {
			flex: 1;
			display: flex;
			flex-direction: column;
			align-items: center;
			justify-content: center;
			padding: 20px 0;
		}

		.service-name {
			color: #ffffff;
			font-size: 28px;
			font-weight: 600;
			margin-bottom: 15px;
		}

		.service-details {
			color: #b0b0b0;
			font-size: 16px;
			line-height: 1.5;
			margin-bottom: 20px;
			text-align: center;
		}

		.service-price {
			color: #8bc34a;
			font-size: 24px;
			font-weight: 600;
			margin-bottom: 10px;
		}

		.service-duration {
			color: #b0b0b0;
			font-size: 14px;
			margin-bottom: 20px;
		}

		.select-service-btn {
			background: #8bc34a;
			color: #000000;
			border: none;
			padding: 12px 30px;
			border-radius: 25px;
			font-size: 16px;
			font-weight: 600;
			cursor: pointer;
			transition: background-color 0.3s ease;
			width: 100%;
			margin-top: auto;
		}

		.select-service-btn:hover {
			background: #7cb342;
		}

		.selected-service-info {
			background: #2d2d2d;
			border: 1px solid #8bc34a;
			border-radius: 8px;
			padding: 20px;
			margin: 20px 40px;
			color: #ffffff;
		}

		.selected-info {
			background: #2d2d2d;
			border: 1px solid #8bc34a;
			border-radius: 8px;
			padding: 15px;
			margin: 20px 0;
			color: #ffffff;
		}

		.barber-card {
			background: #2d2d2d;
			border-radius: 12px;
			padding: 30px;
			width: 400px;
			min-width: 350px;
			max-width: 450px;
			flex: 1 1 auto;
			text-align: center;
			transition: transform 0.3s ease, box-shadow 0.3s ease;
			border: 1px solid #4a4a4a;
			display: flex;
			flex-direction: column;
			justify-content: space-between;
		}

		.barber-card:hover {
			transform: translateY(-5px);
			box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
		}

		.barber-content {
			flex: 1;
			display: flex;
			flex-direction: column;
			align-items: center;
			justify-content: center;
			padding: 20px 0;
		}

		.barber-name {
			color: #ffffff;
			font-size: 28px;
			font-weight: 600;
			margin-bottom: 15px;
		}

		.barber-specialization {
			color: #b0b0b0;
			font-size: 16px;
			line-height: 1.5;
			margin-bottom: 20px;
			text-align: center;
		}

		.book-now-btn {
			background: #8bc34a;
			color: #000000;
			border: none;
			padding: 12px 30px;
			border-radius: 25px;
			font-size: 16px;
			font-weight: 600;
			cursor: pointer;
			transition: background-color 0.3s ease;
			width: 100%;
			margin-top: auto;
		}

		.book-now-btn:hover {
			background: #7cb342;
		}

		.error-message {
			background: #ff4444;
			color: white;
			padding: 15px;
			border-radius: 8px;
			margin: 20px 40px;
			text-align: center;
		}

		.spinner-border {
			color: #8bc34a;
		}

		/* Calendar styles - keeping existing but updating colors */
		.calendar {
			width: 100%;
		}

		.calendar-header {
			display: grid;
			grid-template-columns: repeat(7, 1fr);
			gap: 1px;
			margin-bottom: 10px;
		}

		.day-header {
			background-color: #3a3a3a;
			color: #ffffff;
			padding: 10px;
			text-align: center;
			font-weight: bold;
			border: 1px solid #4a4a4a;
		}

		.calendar-days {
			display: grid;
			grid-template-columns: repeat(7, 1fr);
			gap: 1px;
		}

		.calendar-day {
			min-height: 60px;
			padding: 8px;
			border: 1px solid #4a4a4a;
			display: flex;
			align-items: center;
			justify-content: center;
			cursor: pointer;
			transition: background-color 0.2s;
			background-color: #2d2d2d;
			color: #ffffff;
		}

		.calendar-day:hover {
			background-color: #3a3a3a;
		}

		.calendar-day.other-month {
			color: #6c757d;
			background-color: #1a1a1a;
		}

		.calendar-day.today {
			background-color: #8bc34a;
			color: #000000;
			font-weight: bold;
		}

		.calendar-day.selected {
			background-color: #8bc34a;
			color: #000000;
		}

		.calendar-day.past {
			color: #6c757d;
			cursor: not-allowed;
			background-color: #1a1a1a;
		}

		.hour-slot {
			margin-bottom: 8px;
		}

		.hour-btn {
			width: 100%;
			text-align: left;
			background-color: #2d2d2d;
			border: 1px solid #4a4a4a;
			color: #ffffff;
		}

		.hour-btn:hover {
			background-color: #8bc34a;
			color: #000000;
			border-color: #8bc34a;
		}

		/* Responsive design */
		@media (max-width: 1400px) {

			.barbers-grid,
			.services-grid {
				justify-content: center;
				max-width: 1200px;
			}
		}

		@media (max-width: 1200px) {

			.barbers-grid,
			.services-grid {
				justify-content: center;
				max-width: 900px;
			}

			.barber-card,
			.service-card {
				width: 350px;
				min-width: 300px;
			}
		}

		@media (max-width: 768px) {
			.section-title {
				font-size: 36px;
				text-align: center;
				padding-left: 20px;
			}

			.barbers-grid,
			.services-grid {
				flex-direction: column;
				padding: 0 20px;
				align-items: center;
			}

			.barber-card,
			.service-card {
				width: 100%;
				max-width: 400px;
				min-width: 300px;
			}

			.selected-service-info,
			.selected-info {
				margin: 20px;
			}
		}

		@media (max-width: 480px) {

			.barber-card,
			.service-card {
				min-width: 280px;
				padding: 20px;
			}
		}
	</style>

	<script>
		let currentMonth = new Date().getMonth();
		let currentYear = new Date().getFullYear();
		let selectedBarberId = null;
		let selectedServiceId = null;
		let selectedService = null;
		let selectedDate = null;
		const monthNames = [
			"Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran",
			"Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık"
		];

		async function checkUserAuthentication() {
			try {
				const response = await fetch('/profile/me', {
					credentials: 'include'
				});

				return response.ok;
			} catch (error) {
				console.error('Authentication check failed:', error);
				return false;
			}
		}

		document.addEventListener('DOMContentLoaded', async function () {
			// Check if user is authenticated before loading the page
			const isAuthenticated = await checkUserAuthentication();
			if (!isAuthenticated) {
				// Redirect to login page if not authenticated
				window.location.href = '/login';
				return;
			}

			fetchBarbers(); // Artık önce berber listesini çek
		});

		async function fetchBarbers() {
			const loading = document.getElementById('barberLoading');
			const errorMessage = document.getElementById('barberErrorMessage');
			const barbersGrid = document.getElementById('barbersGrid');

			try {
				const response = await fetch('/api/barbers/getBarbers');

				loading.style.display = 'none';

				if (response.ok) {
					const barbers = await response.json();
					if (barbers && barbers.length > 0) {
						barbersGrid.style.display = 'block';
						renderBarbers(barbers);
					} else {
						errorMessage.textContent = 'Henüz hiç berber bulunamadı.';
						errorMessage.style.display = 'block';
					}
				} else {
					errorMessage.textContent = 'Berberler yüklenirken bir hata oluştu.';
					errorMessage.style.display = 'block';
				}
			} catch (error) {
				loading.style.display = 'none';
				errorMessage.textContent = 'Berberler yüklenirken bir hata oluştu.';
				errorMessage.style.display = 'block';
				console.error('Error fetching barbers:', error);
			}
		}

		function renderBarbers(barbers) {
			const barbersGrid = document.getElementById('barbersGrid');
			barbersGrid.innerHTML = '';

			barbers.forEach(barber => {
				const barberCard = `
					<div class="barber-card" onclick="selectBarber('${barber._id}', '${barber.name} ${barber.surname}')">
						<div class="barber-image">
							<i class="fas fa-user-tie"></i>
						</div>
						<div class="barber-info">
							<h4>${barber.name} ${barber.surname}</h4>
							<p class="barber-phone">${barber.phoneNumber || 'Telefon bilgisi yok'}</p>
						</div>
					</div>
				`;
				barbersGrid.innerHTML += barberCard;
			});
		}

		async function selectBarber(barberId, barberName) {
			selectedBarberId = barberId;
			document.getElementById('selectedBarberName').textContent = barberName;

			// Hide barber selection and show service selection
			document.getElementById('barberSelection').style.display = 'none';
			document.getElementById('serviceSelection').style.display = 'block';

			// Fetch services for selected barber
			await fetchServicesForBarber(barberId);
		}

		async function fetchServicesForBarber(barberId) {
			const loading = document.getElementById('serviceLoading');
			const errorMessage = document.getElementById('serviceErrorMessage');
			const servicesGrid = document.getElementById('servicesGrid');

			loading.style.display = 'block';
			errorMessage.style.display = 'none';
			servicesGrid.style.display = 'none';

			try {
				const response = await fetch(`/api/barbers/${barberId}/services`);

				loading.style.display = 'none';

				if (response.ok) {
					const services = await response.json();
					if (services && services.length > 0) {
						servicesGrid.style.display = 'flex';
						renderServices(services);
					} else {
						errorMessage.textContent = 'Bu berber için henüz hizmet bulunamadı.';
						errorMessage.style.display = 'block';
					}
				} else {
					errorMessage.textContent = 'Hizmetler yüklenirken bir hata oluştu.';
					errorMessage.style.display = 'block';
				}
			} catch (error) {
				loading.style.display = 'none';
				errorMessage.textContent = 'Hizmetler yüklenirken bir hata oluştu.';
				errorMessage.style.display = 'block';
				console.error('Error fetching services for barber:', error);
			}
		}

		function renderServices(services) {
			const servicesGrid = document.getElementById('servicesGrid');
			servicesGrid.innerHTML = '';

			services.forEach(offeredService => {
				const service = offeredService.service; // Berber hizmetlerinden service objesini al
				const serviceCard = document.createElement('div');
				serviceCard.className = 'service-card';
				serviceCard.innerHTML = `
					<div class="service-content">
						<div class="service-name">${service.name}</div>
						<div class="service-price">${offeredService.price}₺</div>
						<div class="service-duration">${offeredService.duration} dakika</div>
					</div>
					<button class="select-service-btn" onclick="selectService('${service._id}', '${service.name}', ${offeredService.duration}, ${offeredService.price})">
						Hizmeti Seç
					</button>
				`;

				servicesGrid.appendChild(serviceCard);
			});
		}

		function selectService(serviceId, serviceName, serviceDuration, servicePrice) {
			selectedServiceId = serviceId;
			selectedService = {
				id: serviceId,
				name: serviceName,
				duration: serviceDuration,
				price: servicePrice
			};

			// Update service info displays
			document.getElementById('selectedServiceNameCalendar').textContent = serviceName;
			document.getElementById('selectedServiceDurationCalendar').textContent = serviceDuration;
			document.getElementById('selectedServicePriceCalendar').textContent = servicePrice;
			document.getElementById('selectedBarberNameCalendar').textContent = document.getElementById('selectedBarberName').textContent;

			// Hide service selection and show calendar
			document.getElementById('serviceSelection').style.display = 'none';
			document.getElementById('calendarSelection').style.display = 'block';

			// Initialize calendar
			updateCalendar();
		}

		// Hide service selection and show barber selection
		function goBackToBarberSelection() {
			document.getElementById('serviceSelection').style.display = 'none';
			document.getElementById('barberSelection').style.display = 'block';
			selectedServiceId = null;
			selectedService = null;
		}

		function goBackToServiceSelection() {
			document.getElementById('calendarSelection').style.display = 'none';
			document.getElementById('serviceSelection').style.display = 'block';
			selectedDate = null;
		}

		// Calendar functions
		function updateCalendar() {
			const calendarTitle = document.getElementById('calendarTitle');
			const calendarDays = document.getElementById('calendarDays');

			calendarTitle.textContent = `${monthNames[currentMonth]} ${currentYear}`;

			const firstDay = new Date(currentYear, currentMonth, 1);
			const lastDay = new Date(currentYear, currentMonth + 1, 0);
			const startDate = new Date(firstDay);
			startDate.setDate(startDate.getDate() - (firstDay.getDay() === 0 ? 6 : firstDay.getDay() - 1));

			calendarDays.innerHTML = '';

			for (let i = 0; i < 42; i++) {
				const date = new Date(startDate);
				date.setDate(startDate.getDate() + i);

				const dayDiv = document.createElement('div');
				dayDiv.className = 'calendar-day';
				dayDiv.textContent = date.getDate();

				const today = new Date();
				const isToday = date.toDateString() === today.toDateString();
				const isPast = date < today.setHours(0, 0, 0, 0);
				const isCurrentMonth = date.getMonth() === currentMonth;

				if (isToday) dayDiv.classList.add('today');
				if (isPast) dayDiv.classList.add('past');
				if (!isCurrentMonth) dayDiv.classList.add('other-month');

				if (!isPast && isCurrentMonth) {
					dayDiv.onclick = () => selectDate(date);
				}

				calendarDays.appendChild(dayDiv);
			}
		}

		function selectDate(date) {
			selectedDate = date;

			// Remove previous selection
			document.querySelectorAll('.calendar-day').forEach(day => {
				day.classList.remove('selected');
			});

			// Add selection to clicked day
			event.target.classList.add('selected');

			// Update selected date display
			const selectedDateDisplay = document.getElementById('selectedDateDisplay');
			selectedDateDisplay.textContent = date.toLocaleDateString('tr-TR');

			// Fetch available hours
			fetchAvailableHours(date);
		}

		async function fetchAvailableHours(date) {
			const availableHours = document.getElementById('availableHours');
			availableHours.innerHTML = '<div class="text-center"><div class="spinner-border spinner-border-sm" role="status"></div></div>';

			try {
				// Fix timezone issue - format date as YYYY-MM-DD without timezone conversion
				const year = date.getFullYear();
				const month = String(date.getMonth() + 1).padStart(2, '0');
				const day = String(date.getDate()).padStart(2, '0');
				const dateStr = `${year}-${month}-${day}`;

				const url = `/api/appointments/availability/${selectedBarberId}?date=${dateStr}&serviceId=${selectedServiceId}`;
				console.log('Fetching from URL:', url);

				const response = await fetch(url);
				const hours = await response.json();

				console.log('Response status:', response.status);
				console.log('Received hours:', hours);

				if (response.ok && hours.length > 0) {
					renderAvailableHours(hours);
				} else {
					availableHours.innerHTML = '<p class="text-muted">Bu tarihte müsait saat bulunmuyor.</p>';
				}
			} catch (error) {
				availableHours.innerHTML = '<p class="text-danger">Saatler yüklenirken hata oluştu.</p>';
				console.error('Error fetching available hours:', error);
			}
		}

		function renderAvailableHours(hours) {
			const availableHours = document.getElementById('availableHours');
			availableHours.innerHTML = '';

			console.log('Rendering hours:', hours);

			hours.forEach(hour => {
				const hourDate = new Date(hour);
				// Use UTC time to avoid timezone conversion
				const timeString = hourDate.getUTCHours().toString().padStart(2, '0') + ':' +
					hourDate.getUTCMinutes().toString().padStart(2, '0');

				console.log('Hour:', hour, 'Display as:', timeString);

				const hourDiv = document.createElement('div');
				hourDiv.className = 'hour-slot';
				hourDiv.innerHTML = `
					<button class="btn btn-outline-primary hour-btn" onclick="selectHour('${hour}', '${timeString}')">
						${timeString}
					</button>
				`;

				availableHours.appendChild(hourDiv);
			});
		}

		function selectHour(hourISO, timeString) {
			if (confirm(`${timeString} saatinde randevu oluşturulsun mu?`)) {
				createAppointment(hourISO);
			}
		}

		async function createAppointment(startTime) {
			try {
				const response = await fetch('/api/appointments', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					},
					credentials: 'include',
					body: JSON.stringify({
						barberId: selectedBarberId,
						serviceId: selectedServiceId,
						startTime: startTime
					})
				});

				const result = await response.json();

				if (response.ok) {
					alert('Randevu başarıyla oluşturuldu!');
					// Refresh available hours
					fetchAvailableHours(selectedDate);
				} else if (response.status === 401) {
					// User is not authenticated, redirect to login
					alert('Oturum süreniz dolmuş. Giriş sayfasına yönlendiriliyorsunuz.');
					window.location.href = '/login';
				} else {
					alert('Hata: ' + result.message);
				}
			} catch (error) {
				alert('Randevu oluşturulurken hata oluştu.');
				console.error('Error creating appointment:', error);
			}
		}

		function previousMonth() {
			currentMonth--;
			if (currentMonth < 0) {
				currentMonth = 11;
				currentYear--;
			}
			generateCalendar();
		}

		function nextMonth() {
			currentMonth++;
			if (currentMonth > 11) {
				currentMonth = 0;
				currentYear++;
			}
			generateCalendar();
		}
	</script>

	<%- include('partials/footer')%>