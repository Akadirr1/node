<!-- views/otp-verification.ejs -->
<!DOCTYPE html>
<html lang="tr">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= title %>
    </title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="/css/style.css">
</head>

<body>
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h4 class="text-center mb-0">SMS Doğrulama</h4>
                    </div>
                    <div class="card-body">
                        <div id="alertContainer"></div>

                        <div id="otpForm">
                            <p class="text-center mb-4">
                                <span id="phoneDisplay"></span> numarasına gönderilen 6 haneli doğrulama kodunu girin.
                            </p>

                            <form id="verifyOtpForm">
                                <div class="mb-3">
                                    <input type="hidden" id="phoneNumber" name="phoneNumber">
                                    <input type="hidden" id="otpType" name="otpType">
                                    <label for="otp" class="form-label">Doğrulama Kodu</label>
                                    <input type="text" class="form-control text-center fs-4" id="otp" name="otp"
                                        maxlength="6" placeholder="000000" required>
                                </div>

                                <div id="passwordFields" style="display: none;">
                                    <div class="mb-3">
                                        <label for="password" class="form-label">Şifre</label>
                                        <input type="password" class="form-control" id="password" name="password"
                                            minlength="8" required>
                                        <div class="form-text">
                                            <small class="text-muted">Şifre gereksinimleri:</small>
                                            <ul class="list-unstyled mt-1 mb-0">
                                                <li id="lengthReq" class="text-danger">
                                                    <i class="fas fa-times"></i> En az 8 karakter
                                                </li>
                                                <li id="uppercaseReq" class="text-danger">
                                                    <i class="fas fa-times"></i> En az 1 büyük harf
                                                </li>
                                                <li id="numberReq" class="text-danger">
                                                    <i class="fas fa-times"></i> En az 1 sayı
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                    <div class="mb-3">
                                        <label for="confirmPassword" class="form-label">Şifre Tekrar</label>
                                        <input type="password" class="form-control" id="confirmPassword"
                                            name="confirmPassword" minlength="8" required>
                                        <div id="passwordMatch" class="invalid-feedback">
                                            Şifreler eşleşmiyor!
                                        </div>
                                    </div>
                                </div>

                                <button type="submit" class="btn btn-primary w-100" id="verifyBtn">
                                    Doğrula
                                </button>
                            </form>

                            <div class="text-center mt-3">
                                <p class="mb-2">
                                    <span id="countdown">10:00</span> içinde kod gelmezse
                                </p>
                                <button type="button" class="btn btn-link p-0" id="resendBtn" disabled>
                                    Tekrar Gönder
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        class OTPVerification {
            constructor() {
                this.phoneNumber = '';
                this.otpType = '';
                this.countdownTimer = null;
                this.init();
            }

            init() {
                // Get URL parameters
                const urlParams = new URLSearchParams(window.location.search);
                this.phoneNumber = urlParams.get('phone') || localStorage.getItem('otpPhone') || '';
                this.otpType = urlParams.get('type') || localStorage.getItem('otpType') || 'register';

                if (!this.phoneNumber) {
                    window.location.href = '/register';
                    return;
                }

                document.getElementById('phoneNumber').value = this.phoneNumber;
                document.getElementById('otpType').value = this.otpType;
                document.getElementById('phoneDisplay').textContent = this.maskPhoneNumber(this.phoneNumber);

                // Show password fields for registration and password reset
                if (this.otpType === 'register' || this.otpType === 'password_reset') {
                    document.getElementById('passwordFields').style.display = 'block';
                    document.getElementById('password').required = true;
                    document.getElementById('confirmPassword').required = true;
                }

                this.setupEventListeners();
                this.startCountdown(600); // 10 minutes
            }

            setupEventListeners() {
                document.getElementById('verifyOtpForm').addEventListener('submit', (e) => {
                    e.preventDefault();
                    this.verifyOTP();
                });

                document.getElementById('resendBtn').addEventListener('click', () => {
                    this.resendOTP();
                });

                // Auto-focus on OTP input and format
                const otpInput = document.getElementById('otp');
                otpInput.addEventListener('input', (e) => {
                    e.target.value = e.target.value.replace(/[^0-9]/g, '');
                });

                // Password validation
                document.getElementById('password').addEventListener('input', () => {
                    this.validatePassword();
                    this.validatePasswords();
                });

                // Password confirmation validation
                document.getElementById('confirmPassword').addEventListener('input', () => {
                    this.validatePasswords();
                });
            }

            async verifyOTP() {
                const formData = new FormData(document.getElementById('verifyOtpForm'));
                const data = Object.fromEntries(formData);

                // Validate passwords if required
                if (this.otpType === 'register' || this.otpType === 'password_reset') {
                    if (data.password !== data.confirmPassword) {
                        this.showAlert('Şifreler eşleşmiyor!', 'danger');
                        return;
                    }

                    // Check password requirements
                    if (!this.validatePassword()) {
                        this.showAlert('Şifre gereksinimlerini karşılamıyor! Lütfen tüm gereksinimleri sağlayın.', 'danger');
                        return;
                    }
                }

                const verifyBtn = document.getElementById('verifyBtn');
                verifyBtn.disabled = true;
                verifyBtn.textContent = 'Doğrulanıyor...';

                try {
                    let endpoint = '';
                    let payload = {
                        phoneNumber: data.phoneNumber,
                        otp: data.otp
                    };

                    switch (this.otpType) {
                        case 'register':
                            endpoint = '/api/otp/verify-registration-otp';
                            payload.password = data.password;
                            payload.confirmPassword = data.confirmPassword;
                            break;
                        case 'login':
                            endpoint = '/api/otp/verify-login-otp';
                            break;
                        case 'password_reset':
                            endpoint = '/api/otp/verify-password-reset-otp';
                            payload.newPassword = data.password;
                            payload.confirmPassword = data.confirmPassword;
                            break;
                    }

                    console.log('Sending request to:', endpoint);
                    console.log('Payload:', payload);

                    const response = await fetch(endpoint, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(payload)
                    });

                    const result = await response.json();
                    console.log('Response status:', response.status);
                    console.log('Response data:', result);

                    if (response.ok) {
                        this.showAlert(result.message, 'success');

                        // Clear localStorage
                        localStorage.removeItem('otpPhone');
                        localStorage.removeItem('otpType');

                        // Redirect based on type
                        setTimeout(() => {
                            if (this.otpType === 'password_reset') {
                                window.location.href = '/login';
                            } else {
                                window.location.href = '/';
                            }
                        }, 2000);
                    } else {
                        this.showAlert(result.message, 'danger');
                    }
                } catch (error) {
                    this.showAlert('Bir hata oluştu. Lütfen tekrar deneyin.', 'danger');
                } finally {
                    verifyBtn.disabled = false;
                    verifyBtn.textContent = 'Doğrula';
                }
            }

            async resendOTP() {
                const resendBtn = document.getElementById('resendBtn');
                resendBtn.disabled = true;
                resendBtn.textContent = 'Gönderiliyor...';

                try {
                    let endpoint = '';
                    let payload = { phoneNumber: this.phoneNumber };

                    switch (this.otpType) {
                        case 'register':
                            // For register, we need additional data from localStorage or prompt user
                            const tempData = JSON.parse(localStorage.getItem('tempUserData') || '{}');
                            if (!tempData.name || !tempData.surname) {
                                this.showAlert('Kayıt bilgileri bulunamadı. Lütfen kayıt işlemini tekrar başlatın.', 'danger');
                                setTimeout(() => window.location.href = '/register', 2000);
                                return;
                            }
                            endpoint = '/api/otp/send-registration-otp';
                            payload = { ...payload, ...tempData };
                            break;
                        case 'login':
                            endpoint = '/api/otp/send-login-otp';
                            break;
                        case 'password_reset':
                            endpoint = '/api/otp/send-password-reset-otp';
                            break;
                    }

                    const response = await fetch(endpoint, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(payload)
                    });

                    const result = await response.json();

                    if (response.ok) {
                        this.showAlert('Yeni doğrulama kodu gönderildi!', 'success');
                        this.startCountdown(600); // Reset countdown
                    } else {
                        this.showAlert(result.message, 'danger');
                    }
                } catch (error) {
                    this.showAlert('Kod gönderilemedi. Lütfen tekrar deneyin.', 'danger');
                } finally {
                    resendBtn.textContent = 'Tekrar Gönder';
                }
            }

            startCountdown(seconds) {
                if (this.countdownTimer) {
                    clearInterval(this.countdownTimer);
                }

                const countdownElement = document.getElementById('countdown');
                const resendBtn = document.getElementById('resendBtn');

                let timeLeft = seconds;
                resendBtn.disabled = true;

                this.countdownTimer = setInterval(() => {
                    const minutes = Math.floor(timeLeft / 60);
                    const seconds = timeLeft % 60;
                    countdownElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;

                    if (timeLeft <= 0) {
                        clearInterval(this.countdownTimer);
                        countdownElement.textContent = '0:00';
                        resendBtn.disabled = false;
                    }

                    timeLeft--;
                }, 1000);
            }

            validatePassword() {
                const password = document.getElementById('password').value;
                const lengthReq = document.getElementById('lengthReq');
                const uppercaseReq = document.getElementById('uppercaseReq');
                const numberReq = document.getElementById('numberReq');

                // Check length (minimum 8 characters)
                const hasLength = password.length >= 8;
                this.updateRequirement(lengthReq, hasLength);

                // Check uppercase letter
                const hasUppercase = /[A-Z]/.test(password);
                this.updateRequirement(uppercaseReq, hasUppercase);

                // Check number
                const hasNumber = /[0-9]/.test(password);
                this.updateRequirement(numberReq, hasNumber);

                return hasLength && hasUppercase && hasNumber;
            }

            updateRequirement(element, isValid) {
                const icon = element.querySelector('i');
                if (isValid) {
                    element.className = 'text-success';
                    icon.className = 'fas fa-check';
                } else {
                    element.className = 'text-danger';
                    icon.className = 'fas fa-times';
                }
            }

            validatePasswords() {
                const password = document.getElementById('password').value;
                const confirmPassword = document.getElementById('confirmPassword').value;
                const confirmInput = document.getElementById('confirmPassword');
                const passwordMatch = document.getElementById('passwordMatch');

                if (confirmPassword && password !== confirmPassword) {
                    confirmInput.classList.add('is-invalid');
                    passwordMatch.style.display = 'block';
                } else {
                    confirmInput.classList.remove('is-invalid');
                    passwordMatch.style.display = 'none';
                }
            }

            maskPhoneNumber(phone) {
                if (phone.length >= 10) {
                    return phone.replace(/(\d{3})\d{4}(\d{4})/, '$1****$2');
                }
                return phone;
            }

            showAlert(message, type) {
                const alertContainer = document.getElementById('alertContainer');
                const alert = document.createElement('div');
                alert.className = `alert alert-${type} alert-dismissible fade show`;
                alert.innerHTML = `
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                `;
                alertContainer.innerHTML = '';
                alertContainer.appendChild(alert);

                // Auto dismiss success alerts
                if (type === 'success') {
                    setTimeout(() => {
                        alert.remove();
                    }, 5000);
                }
            }
        }

        // Initialize when DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            new OTPVerification();
        });
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>

</html>