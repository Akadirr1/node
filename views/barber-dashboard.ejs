<%- include('partials/header')%>

	<div class="dashboard-container">
		<div class="container-fluid">
			<div class="dashboard-header">
				<h1 class="dashboard-title">Berber Yönetim Paneli</h1>
				<div class="welcome-message">
					<span id="welcomeMessage">Hoş geldiniz!</span>
				</div>
			</div>

			<!-- Appointments Section -->
			<div class="appointments-section">
				<div class="appointments-header">
					<h2 class="section-title">Yaklaşan Randevularım</h2>
					<button class="add-appointment-btn" onclick="showAddAppointmentModal()">Manuel Randevu Ekle</button>
				</div>

				<!-- Two Column Layout -->
				<div class="appointments-container">
					<!-- Left Side - Calendar Filter -->
					<div class="calendar-sidebar">
						<div class="calendar-filter-section">
							<div class="calendar-filter-header">
								<h3 class="filter-title">Takvim</h3>
								<div class="date-nav">
									<button class="nav-btn" onclick="previousMonthFilter()">
										<i class="fas fa-chevron-left"></i>
									</button>
									<span id="filterCalendarTitle" class="calendar-month"></span>
									<button class="nav-btn" onclick="nextMonthFilter()">
										<i class="fas fa-chevron-right"></i>
									</button>
								</div>
							</div>
							<div class="mini-calendar">
								<div class="calendar-header-mini">
									<div class="day-header-mini">Pzt</div>
									<div class="day-header-mini">Sal</div>
									<div class="day-header-mini">Çar</div>
									<div class="day-header-mini">Per</div>
									<div class="day-header-mini">Cum</div>
									<div class="day-header-mini">Cmt</div>
									<div class="day-header-mini">Paz</div>
								</div>
								<div id="filterCalendarDays" class="calendar-days-mini">
									<!-- Calendar days will be inserted here -->
								</div>
							</div>
							<div class="filter-actions">
								<span id="selectedDateInfo" class="selected-date-info">Bugün</span>
							</div>
						</div>
					</div>

					<!-- Right Side - Appointments Summary -->
					<div class="appointments-content">
						<!-- Loading Spinner -->
						<div id="appointmentsLoading" class="text-center">
							<div class="spinner-border" role="status">
								<span class="sr-only">Yükleniyor...</span>
							</div>
						</div>

						<!-- Error Message -->
						<div id="appointmentsError" class="error-message" style="display: none;"></div>

						<!-- Appointments Summary -->
						<div id="appointmentsSummary" class="appointments-summary" style="display: none;">
							<div class="summary-card">
								<h3 class="summary-title">Randevu Özeti</h3>
								<div class="summary-stats">
									<div class="stat-item">
										<span class="stat-number" id="totalAppointments">0</span>
										<span class="stat-label">Toplam Randevu</span>
									</div>
									<div class="stat-item">
										<span class="stat-number" id="todayAppointments">0</span>
										<span class="stat-label">Bugün</span>
									</div>
									<div class="stat-item">
										<span class="stat-number" id="thisWeekAppointments">0</span>
										<span class="stat-label">Bu Hafta</span>
									</div>
								</div>
								<div class="summary-info">
									<p><i class="fas fa-info-circle"></i> Takvimde bir güne tıklayarak o günün
										randevularını görüntüleyebilirsiniz.</p>
									<p><i class="fas fa-calendar-check"></i> Randevulu günler takvimde yeşil nokta ile
										işaretlidir.</p>
								</div>
							</div>
						</div>

						<!-- No Appointments Message -->
						<div id="noAppointments" class="no-appointments" style="display: none;">
							<div class="empty-state">
								<i class="fas fa-calendar-times fa-3x"></i>
								<h3>Henüz Randevunuz Yok</h3>
								<p>Manuel randevu ekleyebilir veya müşterilerinizin online randevu almasını
									bekleyebilirsiniz.</p>
							</div>
						</div>
					</div>
				</div>

				<!-- Day Appointments Modal -->
				<div id="dayAppointmentsModal" class="modal" style="display: none;">
					<div class="modal-content day-appointments-modal">
						<div class="modal-header">
							<h3 id="modalDateTitle">Günün Randevuları</h3>
							<span class="close" onclick="closeDayAppointmentsModal()">&times;</span>
						</div>
						<div class="modal-body">
							<div id="dayAppointmentsList" class="day-appointments-list">
								<!-- Day appointments will be inserted here -->
							</div>
							<div id="noDayAppointments" class="no-day-appointments" style="display: none;">
								<i class="fas fa-calendar-day"></i>
								<p>Bu günde henüz randevu bulunmamaktadır.</p>
							</div>
						</div>
					</div>
				</div>
			</div>

			<!-- Services Section -->
			<div class="services-section">
				<div class="services-header">
					<h2 class="section-title">Aktif Hizmetlerim</h2>
					<button class="add-service-btn" onclick="showAddServiceModal()">Hizmet Ekle</button>
				</div>

				<!-- Loading Spinner for Services -->
				<div id="servicesLoading" class="text-center">
					<div class="spinner-border" role="status">
						<span class="sr-only">Yükleniyor...</span>
					</div>
				</div>

				<!-- Error Message for Services -->
				<div id="servicesError" class="error-message" style="display: none;"></div>

				<!-- Services List -->
				<div id="servicesList" class="services-list" style="display: none;">
					<!-- Services will be inserted here -->
				</div>

				<!-- No Services Message -->
				<div id="noServices" class="no-services" style="display: none;">
					<p>Henüz aktif hizmetiniz bulunmamaktadır.</p>
				</div>
			</div>

			<!-- Time Offs Section -->
			<div class="timeoffs-section">
				<div class="timeoffs-header">
					<h2 class="section-title">İzin Günlerim</h2>
					<button class="add-timeoff-btn" onclick="showAddTimeOffModal()">İzin Ekle</button>
				</div>

				<!-- Loading Spinner for Time Offs -->
				<div id="timeOffsLoading" class="text-center">
					<div class="spinner-border" role="status">
						<span class="sr-only">Yükleniyor...</span>
					</div>
				</div>

				<!-- Error Message for Time Offs -->
				<div id="timeOffsError" class="error-message" style="display: none;"></div>

				<!-- Time Offs List -->
				<div id="timeOffsList" class="timeoffs-list" style="display: none;">
					<!-- Time offs will be inserted here -->
				</div>

				<!-- No Time Offs Message -->
				<div id="noTimeOffs" class="no-timeoffs" style="display: none;">
					<p>Henüz izin gününüz bulunmamaktadır.</p>
				</div>
			</div>

			<!-- Availability Section -->
			<div class="availability-section">
				<div class="availability-header">
					<h2 class="section-title">Çalışma Saatlerini Düzenle</h2>
				</div>

				<div class="availability-form-container">
					<form id="availabilityForm">
						<div class="days-grid">
							<div class="day-card" data-day="monday">
								<div class="day-header">
									<div class="day-info">
										<h3>Pazartesi</h3>
										<span class="day-status">Kapalı</span>
									</div>
									<label class="switch">
										<input type="checkbox" id="monday-enabled" onchange="toggleDayCard('monday')">
										<span class="slider"></span>
									</label>
								</div>
								<div class="time-selector hidden">
									<div class="time-group">
										<label>Başlangıç Saati</label>
										<input type="text" id="monday-start" class="time-picker"
											placeholder="Saat seçin">
									</div>
									<div class="time-group">
										<label>Bitiş Saati</label>
										<input type="text" id="monday-end" class="time-picker" placeholder="Saat seçin">
									</div>
								</div>
							</div>

							<div class="day-card" data-day="tuesday">
								<div class="day-header">
									<div class="day-info">
										<h3>Salı</h3>
										<span class="day-status">Kapalı</span>
									</div>
									<label class="switch">
										<input type="checkbox" id="tuesday-enabled" onchange="toggleDayCard('tuesday')">
										<span class="slider"></span>
									</label>
								</div>
								<div class="time-selector hidden">
									<div class="time-group">
										<label>Başlangıç Saati</label>
										<input type="text" id="tuesday-start" class="time-picker"
											placeholder="Saat seçin">
									</div>
									<div class="time-group">
										<label>Bitiş Saati</label>
										<input type="text" id="tuesday-end" class="time-picker"
											placeholder="Saat seçin">
									</div>
								</div>
							</div>

							<div class="day-card" data-day="wednesday">
								<div class="day-header">
									<div class="day-info">
										<h3>Çarşamba</h3>
										<span class="day-status">Kapalı</span>
									</div>
									<label class="switch">
										<input type="checkbox" id="wednesday-enabled"
											onchange="toggleDayCard('wednesday')">
										<span class="slider"></span>
									</label>
								</div>
								<div class="time-selector hidden">
									<div class="time-group">
										<label>Başlangıç Saati</label>
										<input type="text" id="wednesday-start" class="time-picker"
											placeholder="Saat seçin">
									</div>
									<div class="time-group">
										<label>Bitiş Saati</label>
										<input type="text" id="wednesday-end" class="time-picker"
											placeholder="Saat seçin">
									</div>
								</div>
							</div>

							<div class="day-card" data-day="thursday">
								<div class="day-header">
									<div class="day-info">
										<h3>Perşembe</h3>
										<span class="day-status">Kapalı</span>
									</div>
									<label class="switch">
										<input type="checkbox" id="thursday-enabled"
											onchange="toggleDayCard('thursday')">
										<span class="slider"></span>
									</label>
								</div>
								<div class="time-selector hidden">
									<div class="time-group">
										<label>Başlangıç Saati</label>
										<input type="text" id="thursday-start" class="time-picker"
											placeholder="Saat seçin">
									</div>
									<div class="time-group">
										<label>Bitiş Saati</label>
										<input type="text" id="thursday-end" class="time-picker"
											placeholder="Saat seçin">
									</div>
								</div>
							</div>

							<div class="day-card" data-day="friday">
								<div class="day-header">
									<div class="day-info">
										<h3>Cuma</h3>
										<span class="day-status">Kapalı</span>
									</div>
									<label class="switch">
										<input type="checkbox" id="friday-enabled" onchange="toggleDayCard('friday')">
										<span class="slider"></span>
									</label>
								</div>
								<div class="time-selector hidden">
									<div class="time-group">
										<label>Başlangıç Saati</label>
										<input type="text" id="friday-start" class="time-picker"
											placeholder="Saat seçin">
									</div>
									<div class="time-group">
										<label>Bitiş Saati</label>
										<input type="text" id="friday-end" class="time-picker" placeholder="Saat seçin">
									</div>
								</div>
							</div>

							<div class="day-card" data-day="saturday">
								<div class="day-header">
									<div class="day-info">
										<h3>Cumartesi</h3>
										<span class="day-status">Kapalı</span>
									</div>
									<label class="switch">
										<input type="checkbox" id="saturday-enabled"
											onchange="toggleDayCard('saturday')">
										<span class="slider"></span>
									</label>
								</div>
								<div class="time-selector hidden">
									<div class="time-group">
										<label>Başlangıç Saati</label>
										<input type="text" id="saturday-start" class="time-picker"
											placeholder="Saat seçin">
									</div>
									<div class="time-group">
										<label>Bitiş Saati</label>
										<input type="text" id="saturday-end" class="time-picker"
											placeholder="Saat seçin">
									</div>
								</div>
							</div>

							<div class="day-card" data-day="sunday">
								<div class="day-header">
									<div class="day-info">
										<h3>Pazar</h3>
										<span class="day-status">Kapalı</span>
									</div>
									<label class="switch">
										<input type="checkbox" id="sunday-enabled" onchange="toggleDayCard('sunday')">
										<span class="slider"></span>
									</label>
								</div>
								<div class="time-selector hidden">
									<div class="time-group">
										<label>Başlangıç Saati</label>
										<input type="text" id="sunday-start" class="time-picker"
											placeholder="Saat seçin">
									</div>
									<div class="time-group">
										<label>Bitiş Saati</label>
										<input type="text" id="sunday-end" class="time-picker" placeholder="Saat seçin">
									</div>
								</div>
							</div>
						</div>

						<div class="form-actions-modern">
							<button type="submit" class="save-btn-modern">
								<span class="btn-icon">💾</span>
								Çalışma Saatlerini Kaydet
							</button>
						</div>
					</form>
				</div>
			</div>

			<!-- Add Service Modal -->
			<div id="addServiceModal" class="modal" style="display: none;">
				<div class="modal-content">
					<div class="modal-header">
						<h3>Yeni Hizmet Ekle</h3>
						<span class="close" onclick="hideAddServiceModal()">&times;</span>
					</div>
					<div class="modal-body">
						<form id="addServiceForm">
							<div class="form-group">
								<label for="serviceSelect">Hizmet Seçin:</label>
								<select id="serviceSelect" required>
									<option value="">Hizmet seçiniz...</option>
									<!-- Options will be loaded dynamically -->
								</select>
							</div>
							<div class="form-group">
								<label for="servicePrice">Fiyat (₺):</label>
								<input type="number" id="servicePrice" min="0" step="0.01" required>
							</div>
							<div class="form-group">
								<label for="serviceDuration">Süre (dakika):</label>
								<input type="number" id="serviceDuration" min="1" step="1" required>
							</div>
							<div class="form-actions">
								<button type="button" class="cancel-btn-modal"
									onclick="hideAddServiceModal()">İptal</button>
								<button type="submit" class="save-btn">Hizmeti Ekle</button>
							</div>
						</form>
					</div>
				</div>
			</div>

			<!-- Edit Service Modal -->
			<div id="editServiceModal" class="modal" style="display: none;">
				<div class="modal-content">
					<div class="modal-header">
						<h3>Hizmet Düzenle</h3>
						<span class="close" onclick="hideEditServiceModal()">&times;</span>
					</div>
					<div class="modal-body">
						<form id="editServiceForm">
							<div class="form-group">
								<label for="editServiceName">Hizmet Adı:</label>
								<input type="text" id="editServiceName" readonly style="background: #333; color: #aaa;">
							</div>
							<div class="form-group">
								<label for="editServicePrice">Fiyat (₺):</label>
								<input type="number" id="editServicePrice" min="0" step="0.01" required>
							</div>
							<div class="form-group">
								<label for="editServiceDuration">Süre (dakika):</label>
								<input type="number" id="editServiceDuration" min="1" step="1" required>
							</div>
							<div class="form-actions">
								<button type="button" class="cancel-btn-modal"
									onclick="hideEditServiceModal()">İptal</button>
								<button type="submit" class="save-btn">Güncelle</button>
							</div>
						</form>
					</div>
				</div>
			</div>

			<!-- Add Time Off Modal -->
			<div id="addTimeOffModal" class="modal" style="display: none;">
				<div class="modal-content time-off-modal">
					<div class="modal-header">
						<h3>Yeni İzin Günü Ekle</h3>
						<span class="close" onclick="hideAddTimeOffModal()">&times;</span>
					</div>
					<div class="modal-body">
						<form id="addTimeOffForm">
							<!-- Date Range Selection -->
							<div class="form-group">
								<label class="form-label">İzin Tarihi Aralığı:</label>
								<div class="date-range-container">
									<div class="date-input-group">
										<label for="timeOffStartDate">Başlangıç Tarihi:</label>
										<input type="date" id="timeOffStartDate" required>
									</div>
									<div class="date-input-group">
										<label for="timeOffEndDate">Bitiş Tarihi:</label>
										<input type="date" id="timeOffEndDate" required>
									</div>
								</div>
							</div>

							<!-- Time Selection with Availability-style UI -->
							<div class="form-group">
								<label class="form-label">Günlük Çalışma Saatleri:</label>
								<div class="timeoff-time-selection">
									<div class="time-group">
										<label>Başlangıç Saati</label>
										<input type="text" id="timeoff-start-time" class="time-picker"
											placeholder="Saat seçin" required>
									</div>
									<div class="time-group">
										<label>Bitiş Saati</label>
										<input type="text" id="timeoff-end-time" class="time-picker"
											placeholder="Saat seçin" required>
									</div>
								</div>
								<div class="time-info">
									<small>Bu saatler arasında her gün izinli olacaksınız</small>
								</div>
							</div>

							<!-- Reason -->
							<div class="form-group">
								<label for="timeOffReason" class="form-label">İzin Sebebi:</label>
								<textarea id="timeOffReason" rows="3" placeholder="İzin sebebinizi yazın..."
									required></textarea>
							</div>

							<div class="form-actions">
								<button type="button" class="cancel-btn-modal"
									onclick="hideAddTimeOffModal()">İptal</button>
								<button type="submit" class="save-btn">İzin Ekle</button>
							</div>
						</form>
					</div>
				</div>
			</div>

			<!-- Add Manual Appointment Modal -->
			<div id="addAppointmentModal" class="modal" style="display: none;">
				<div class="modal-content appointment-modal">
					<div class="modal-header">
						<h3>Manuel Randevu Ekle</h3>
						<span class="close" onclick="hideAddAppointmentModal()">&times;</span>
					</div>
					<div class="modal-body">
						<form id="addAppointmentForm">
							<!-- Customer Type Selection -->
							<div class="form-group">
								<label class="form-label">Müşteri Tipi:</label>
								<div class="customer-type-tabs">
									<button type="button" class="tab-btn active" id="registeredTab"
										onclick="switchCustomerType('registered')">
										Kayıtlı Müşteri
									</button>
									<button type="button" class="tab-btn" id="guestTab"
										onclick="switchCustomerType('guest')">
										Misafir
									</button>
								</div>
							</div>

							<!-- Registered Customer Section -->
							<div id="registeredCustomerSection" class="customer-section">
								<div class="form-group">
									<label for="customerSearch" class="form-label">Müşteri Ara (Telefon):</label>
									<input type="tel" id="customerSearch" class="form-control"
										placeholder="Telefon numarası girin..." oninput="searchCustomers(this.value)">
									<div id="selectedCustomerInfo" class="selected-customer-info"
										style="display: none;"></div>
								</div>
								<input type="hidden" id="customerId" value="">
							</div>

							<!-- Guest Customer Section -->
							<div id="guestCustomerSection" class="customer-section" style="display: none;">
								<div class="form-group">
									<label class="form-label">Misafir Bilgileri:</label>
									<div class="guest-info-container">
										<div class="input-group">
											<label for="guestName">Ad:</label>
											<input type="text" id="guestName" placeholder="Müşteri adı">
										</div>
										<div class="input-group">
											<label for="guestSurname">Soyad:</label>
											<input type="text" id="guestSurname" placeholder="Müşteri soyadı">
										</div>
										<div class="input-group">
											<label for="guestPhone">Telefon:</label>
											<input type="tel" id="guestPhone" placeholder="0532 123 45 67">
										</div>
									</div>
								</div>
							</div>

							<!-- Service Selection -->
							<div class="form-group">
								<label for="appointmentServiceId" class="form-label">Hizmet:</label>
								<select id="appointmentServiceId" class="form-select" required>
									<option value="">Hizmet seçin...</option>
								</select>
							</div>

							<!-- Date and Time Selection -->
							<div class="form-group">
								<label class="form-label">Randevu Tarihi ve Saati:</label>
								<div class="datetime-container">
									<div class="input-group">
										<label for="appointmentDate">Tarih:</label>
										<input type="date" id="appointmentDate" required>
									</div>
									<div class="input-group">
										<label for="appointmentTime">Saat:</label>
										<input type="text" id="appointmentTime" class="time-picker"
											placeholder="Saat seçin" required>
									</div>
								</div>
							</div>

							<div class="form-actions">
								<button type="button" class="cancel-btn-modal"
									onclick="hideAddAppointmentModal()">İptal</button>
								<button type="submit" class="save-btn">Randevu Ekle</button>
							</div>
						</form>
					</div>
				</div>
			</div>

		</div>
	</div>

	<style>
		.dashboard-container {
			background-color: #1a1a1a;
			min-height: 100vh;
			padding: 60px 0;
		}

		.dashboard-header {
			display: flex;
			justify-content: space-between;
			align-items: center;
			margin-bottom: 40px;
			padding: 0 40px;
		}

		.dashboard-title {
			color: #8bc34a;
			font-size: 36px;
			font-weight: 600;
			margin: 0;
		}

		.welcome-message {
			color: #ffffff;
			font-size: 18px;
		}

		.appointments-section {
			padding: 0 20px;
			width: 100%;
			max-width: none;
		}

		/* Two Column Layout */
		.appointments-container {
			display: flex;
			gap: 20px;
			align-items: flex-start;
		}

		.calendar-sidebar {
			flex: 0 0 300px;
			min-width: 280px;
		}

		.appointments-content {
			flex: 1;
			min-width: 0;
		}

		/* Calendar Filter Styles */
		.calendar-filter-section {
			background: #2d2d2d;
			border: 1px solid #4a4a4a;
			border-radius: 8px;
			padding: 15px;
		}

		.calendar-filter-header {
			display: flex;
			justify-content: space-between;
			align-items: center;
			margin-bottom: 12px;
		}

		.filter-title {
			color: #ffffff;
			font-size: 16px;
			font-weight: 600;
			margin: 0;
		}

		.date-nav {
			display: flex;
			align-items: center;
			gap: 8px;
		}

		.nav-btn {
			background: #3a3a3a;
			border: none;
			color: #ffffff;
			padding: 6px 8px;
			border-radius: 4px;
			cursor: pointer;
			transition: background-color 0.3s ease;
			font-size: 12px;
		}

		.nav-btn:hover {
			background: #4a4a4a;
		}

		.calendar-month {
			color: #8bc34a;
			font-weight: 600;
			font-size: 14px;
			min-width: 100px;
			text-align: center;
		}

		.mini-calendar {
			margin: 10px 0;
		}

		.calendar-header-mini {
			display: grid;
			grid-template-columns: repeat(7, 1fr);
			gap: 1px;
			margin-bottom: 3px;
		}

		.day-header-mini {
			background: #3a3a3a;
			color: #ffffff;
			padding: 6px 2px;
			text-align: center;
			font-size: 10px;
			font-weight: 600;
			border-radius: 3px;
		}

		.calendar-days-mini {
			display: grid;
			grid-template-columns: repeat(7, 1fr);
			gap: 1px;
		}

		.calendar-day-mini {
			background: #3a3a3a;
			color: #ffffff;
			padding: 8px 2px;
			text-align: center;
			font-size: 12px;
			border-radius: 3px;
			cursor: pointer;
			transition: all 0.3s ease;
			position: relative;
			min-height: 30px;
			display: flex;
			align-items: center;
			justify-content: center;
		}

		.calendar-day-mini:hover {
			background: #4a4a4a;
		}

		.calendar-day-mini.other-month {
			color: #666;
			background: #252525;
		}

		.calendar-day-mini.today {
			background: #8bc34a;
			color: #000;
			font-weight: 600;
		}

		.calendar-day-mini.selected {
			background: #ff6b35;
			color: #ffffff;
			font-weight: 600;
		}

		.calendar-day-mini.has-appointments::after {
			content: '';
			position: absolute;
			bottom: 2px;
			left: 50%;
			transform: translateX(-50%);
			width: 3px;
			height: 3px;
			background: #8bc34a;
			border-radius: 50%;
		}

		.filter-actions {
			display: flex;
			justify-content: flex-end;
			align-items: center;
			margin-top: 10px;
		}

		.selected-date-info {
			color: #8bc34a;
			font-size: 11px;
			font-weight: 500;
			text-align: right;
		}

		/* Appointments Summary Styles */
		.appointments-summary {
			padding: 0;
		}

		.summary-card {
			background: #2d2d2d;
			border: 1px solid #4a4a4a;
			border-radius: 8px;
			padding: 20px;
		}

		.summary-title {
			color: #ffffff;
			font-size: 20px;
			font-weight: 600;
			margin-bottom: 20px;
			text-align: center;
		}

		.summary-stats {
			display: grid;
			grid-template-columns: repeat(3, 1fr);
			gap: 20px;
			margin-bottom: 25px;
		}

		.stat-item {
			text-align: center;
			padding: 15px;
			background: #3a3a3a;
			border-radius: 8px;
		}

		.stat-number {
			display: block;
			color: #8bc34a;
			font-size: 28px;
			font-weight: 700;
			margin-bottom: 5px;
		}

		.stat-label {
			color: #b0b0b0;
			font-size: 14px;
			font-weight: 500;
		}

		.summary-info {
			border-top: 1px solid #4a4a4a;
			padding-top: 20px;
		}

		.summary-info p {
			color: #b0b0b0;
			margin-bottom: 10px;
			font-size: 14px;
		}

		.summary-info i {
			color: #8bc34a;
			margin-right: 8px;
		}

		.empty-state {
			text-align: center;
			padding: 40px 20px;
			color: #b0b0b0;
		}

		.empty-state i {
			color: #666;
			margin-bottom: 20px;
		}

		.empty-state h3 {
			color: #ffffff;
			margin-bottom: 15px;
		}

		/* Day Appointments Modal */
		.day-appointments-modal {
			max-width: 500px;
			max-height: 80vh;
			position: fixed;
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);
			margin: 0;
		}

		.day-appointments-list {
			max-height: 400px;
			overflow-y: auto;
		}

		.day-appointment-item {
			background: #3a3a3a;
			border-radius: 6px;
			padding: 12px;
			margin-bottom: 8px;
			border: 1px solid #4a4a4a;
		}

		.day-appointment-header {
			display: flex;
			justify-content: space-between;
			align-items: center;
			margin-bottom: 6px;
		}

		.day-customer-name {
			color: #8bc34a;
			font-weight: 600;
			font-size: 14px;
		}

		.day-appointment-time {
			color: #ffffff;
			font-weight: 500;
			background: #2d2d2d;
			padding: 3px 6px;
			border-radius: 4px;
			font-size: 12px;
		}

		.day-appointment-details {
			display: grid;
			grid-template-columns: 1fr 1fr;
			gap: 8px;
			margin-top: 6px;
		}

		.day-detail-item {
			font-size: 11px;
		}

		.day-detail-label {
			color: #b0b0b0;
			margin-bottom: 1px;
			font-size: 10px;
		}

		.day-detail-value {
			color: #ffffff;
			font-weight: 500;
			font-size: 11px;
		}

		.day-service-name {
			color: #8bc34a;
		}

		.day-cancel-btn {
			background: #ff4444;
			color: white;
			border: none;
			padding: 5px 10px;
			border-radius: 4px;
			font-size: 11px;
			cursor: pointer;
			margin-top: 8px;
			width: 100%;
		}

		.day-cancel-btn:hover {
			background: #ff3333;
		}

		/* Past Appointment Styles */
		.past-appointment {
			opacity: 0.7;
			border-left: 4px solid #666;
		}

		.past-appointment .day-customer-name {
			color: #999;
		}

		.past-appointment .day-appointment-time {
			background: #555;
			color: #ccc;
		}

		.past-appointment .day-service-name {
			color: #999;
		}

		.past-appointment-badge {
			background: #666;
			color: #ccc;
			padding: 5px 10px;
			border-radius: 4px;
			font-size: 11px;
			text-align: center;
			margin-top: 8px;
			font-weight: 500;
		}

		.no-day-appointments {
			text-align: center;
			padding: 40px 20px;
			color: #b0b0b0;
		}

		.no-day-appointments i {
			font-size: 48px;
			color: #666;
			margin-bottom: 15px;
		}

		.services-section {
			padding: 0 40px;
			margin-top: 50px;
		}

		.services-header {
			display: flex;
			justify-content: space-between;
			align-items: center;
			margin-bottom: 30px;
		}

		.add-service-btn {
			background: #8bc34a;
			color: #000000;
			border: none;
			padding: 12px 24px;
			border-radius: 8px;
			font-size: 16px;
			font-weight: 600;
			cursor: pointer;
			transition: background-color 0.3s ease;
		}

		.add-service-btn:hover {
			background: #7cb342;
		}

		.add-timeoff-btn {
			background: #ff9800;
			color: #000000;
			border: none;
			padding: 12px 24px;
			border-radius: 8px;
			font-size: 16px;
			font-weight: 600;
			cursor: pointer;
			transition: background-color 0.3s ease;
		}

		.add-timeoff-btn:hover {
			background: #f57c00;
		}

		/* Modal Styles */
		.modal {
			position: fixed;
			z-index: 1000;
			left: 0;
			top: 0;
			width: 100%;
			height: 100%;
			background-color: rgba(0, 0, 0, 0.8);
			display: flex;
			justify-content: center;
			align-items: center;
		}

		.modal-content {
			background: #2d2d2d;
			border-radius: 12px;
			width: 90%;
			max-width: 500px;
			border: 1px solid #4a4a4a;
		}

		.modal-header {
			display: flex;
			justify-content: space-between;
			align-items: center;
			padding: 20px 25px;
			border-bottom: 1px solid #4a4a4a;
		}

		.modal-header h3 {
			color: #8bc34a;
			margin: 0;
			font-size: 20px;
		}

		.close {
			color: #ffffff;
			font-size: 28px;
			font-weight: bold;
			cursor: pointer;
			line-height: 1;
		}

		.close:hover {
			color: #8bc34a;
		}

		.modal-body {
			padding: 25px;
		}

		.form-group {
			margin-bottom: 20px;
		}

		.form-group label {
			display: block;
			color: #ffffff;
			font-weight: 600;
			margin-bottom: 8px;
		}

		.form-group input,
		.form-group select {
			width: 100%;
			padding: 12px;
			border: 1px solid #4a4a4a;
			border-radius: 6px;
			background: #1a1a1a;
			color: #ffffff;
			font-size: 16px;
		}

		.form-group input:focus,
		.form-group select:focus {
			outline: none;
			border-color: #8bc34a;
		}

		.form-group textarea {
			width: 100%;
			padding: 12px;
			border: 1px solid #4a4a4a;
			border-radius: 6px;
			background: #1a1a1a;
			color: #ffffff;
			font-size: 16px;
			font-family: inherit;
			resize: vertical;
			min-height: 80px;
		}

		.form-group textarea:focus {
			outline: none;
			border-color: #8bc34a;
		}

		.form-actions {
			display: flex;
			gap: 15px;
			justify-content: flex-end;
			margin-top: 30px;
		}

		.cancel-btn-modal {
			background: #666;
			color: white;
			border: none;
			padding: 12px 24px;
			border-radius: 6px;
			font-size: 16px;
			cursor: pointer;
			transition: background-color 0.3s ease;
		}

		.cancel-btn-modal:hover {
			background: #555;
		}

		.save-btn {
			background: #8bc34a;
			color: #000000;
			border: none;
			padding: 12px 24px;
			border-radius: 6px;
			font-size: 16px;
			font-weight: 600;
			cursor: pointer;
			transition: background-color 0.3s ease;
		}

		.save-btn:hover {
			background: #7cb342;
		}

		/* Selected Customer Info Styling */
		.selected-customer-info {
			margin-top: 10px;
			padding: 8px 12px;
			border-radius: 5px;
			font-size: 14px;
			font-weight: 500;
			border: 1px solid transparent;
			background-color: rgba(255, 255, 255, 0.05);
		}

		.selected-customer-info.success {
			background-color: rgba(40, 167, 69, 0.1);
			border-color: #28a745;
			color: #28a745;
		}

		.selected-customer-info.error {
			background-color: rgba(220, 53, 69, 0.1);
			border-color: #dc3545;
			color: #dc3545;
		}

		.selected-customer-info.warning {
			background-color: rgba(255, 193, 7, 0.1);
			border-color: #ffc107;
			color: #ffc107;
		}

		.save-btn:disabled {
			background: #666;
			cursor: not-allowed;
		}

		/* Appointments Header */
		.appointments-header {
			display: flex;
			justify-content: space-between;
			align-items: center;
			margin-bottom: 30px;
		}

		.add-appointment-btn {
			background: #2196f3;
			color: white;
			border: none;
			padding: 12px 24px;
			border-radius: 8px;
			font-size: 16px;
			font-weight: 600;
			cursor: pointer;
			transition: background-color 0.3s ease;
		}

		.add-appointment-btn:hover {
			background: #1976d2;
		}

		/* Appointment Modal Specific Styles */
		.appointment-modal {
			max-width: 700px;
		}

		.customer-type-tabs {
			display: flex;
			background: #1a1a1a;
			border-radius: 8px;
			padding: 4px;
			margin-bottom: 20px;
		}

		.tab-btn {
			flex: 1;
			background: transparent;
			color: #ffffff;
			border: none;
			padding: 12px 16px;
			border-radius: 6px;
			font-size: 14px;
			font-weight: 500;
			cursor: pointer;
			transition: all 0.3s ease;
		}

		.tab-btn.active {
			background: #2196f3;
			color: #ffffff;
		}

		.tab-btn:hover:not(.active) {
			background: #333;
		}

		.customer-section {
			margin-bottom: 20px;
		}

		.guest-info-container {
			display: grid;
			grid-template-columns: 1fr 1fr;
			gap: 15px;
		}

		.guest-info-container .input-group:last-child {
			grid-column: 1 / -1;
		}

		.input-group {
			display: flex;
			flex-direction: column;
		}

		.input-group label {
			color: #ffffff;
			font-size: 14px;
			font-weight: 500;
			margin-bottom: 8px;
		}

		.input-group input {
			padding: 12px;
			border: 2px solid #4a4a4a;
			border-radius: 8px;
			background: #1a1a1a;
			color: #ffffff;
			font-size: 16px;
			transition: border-color 0.3s ease;
		}

		.input-group input:focus {
			outline: none;
			border-color: #2196f3;
			box-shadow: 0 0 0 3px rgba(33, 150, 243, 0.1);
		}

		.form-select {
			width: 100%;
			padding: 12px;
			border: 2px solid #4a4a4a;
			border-radius: 8px;
			background: #1a1a1a;
			color: #ffffff;
			font-size: 16px;
			cursor: pointer;
			transition: border-color 0.3s ease;
		}

		.form-select:focus {
			outline: none;
			border-color: #2196f3;
			box-shadow: 0 0 0 3px rgba(33, 150, 243, 0.1);
		}

		.form-select option {
			background: #1a1a1a;
			color: #ffffff;
		}

		.datetime-container {
			display: grid;
			grid-template-columns: 1fr 1fr;
			gap: 20px;
		}

		@media (max-width: 768px) {

			.guest-info-container,
			.datetime-container {
				grid-template-columns: 1fr;
				gap: 15px;
			}

			.appointment-modal {
				margin: 20px;
				max-width: none;
			}

			.appointments-header {
				flex-direction: column;
				gap: 15px;
				align-items: stretch;
			}
		}

		/* Time Off Modal Specific Styles */
		.time-off-modal {
			max-width: 600px;
		}

		.form-label {
			color: #8bc34a !important;
			font-size: 16px;
			font-weight: 600;
			margin-bottom: 15px;
		}

		.date-range-container {
			display: grid;
			grid-template-columns: 1fr 1fr;
			gap: 20px;
			margin-bottom: 10px;
		}

		.time-selection-container {
			display: grid;
			grid-template-columns: 1fr 1fr;
			gap: 20px;
			margin-bottom: 10px;
		}

		.timeoff-time-selection {
			display: grid;
			grid-template-columns: 1fr 1fr;
			gap: 20px;
			margin-bottom: 10px;
		}

		.date-input-group,
		.time-input-group {
			display: flex;
			flex-direction: column;
		}

		.time-group {
			display: flex;
			flex-direction: column;
		}

		.date-input-group label,
		.time-input-group label,
		.time-group label {
			color: #ffffff;
			font-size: 14px;
			font-weight: 500;
			margin-bottom: 8px;
		}

		.date-input-group input,
		.time-input-group input {
			padding: 12px;
			border: 2px solid #4a4a4a;
			border-radius: 8px;
			background: #1a1a1a;
			color: #ffffff;
			font-size: 16px;
			transition: border-color 0.3s ease;
		}

		.time-group .time-picker {
			padding: 12px;
			border: 2px solid #4a4a4a;
			border-radius: 8px;
			background: #1a1a1a;
			color: #ffffff;
			font-size: 16px;
			cursor: pointer;
			transition: border-color 0.3s ease;
		}

		.date-input-group input:focus,
		.time-input-group input:focus,
		.time-group .time-picker:focus {
			outline: none;
			border-color: #8bc34a;
			box-shadow: 0 0 0 3px rgba(139, 195, 74, 0.1);
		}

		.time-info {
			text-align: center;
			margin-top: 10px;
		}

		.time-info small {
			color: #999;
			font-size: 12px;
		}

		/* Custom date and time input styling */
		input[type="date"]::-webkit-calendar-picker-indicator,
		input[type="time"]::-webkit-calendar-picker-indicator {
			filter: invert(1);
			cursor: pointer;
		}

		@media (max-width: 768px) {

			.date-range-container,
			.time-selection-container,
			.timeoff-time-selection {
				grid-template-columns: 1fr;
				gap: 15px;
			}

			.time-off-modal {
				margin: 20px;
				max-width: none;
			}
		}

		.services-list {
			display: grid;
			grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
			gap: 20px;
		}

		.service-card {
			background: #2d2d2d;
			border-radius: 12px;
			padding: 20px;
			border: 1px solid #4a4a4a;
			transition: transform 0.3s ease, box-shadow 0.3s ease;
			position: relative;
		}

		.service-card:hover {
			transform: translateY(-2px);
			box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
			border-color: #8bc34a;
		}

		.edit-indicator {
			position: absolute;
			bottom: 10px;
			right: 15px;
			color: #8bc34a;
			font-size: 12px;
			opacity: 0;
			transition: opacity 0.3s ease;
		}

		.service-card:hover .edit-indicator {
			opacity: 1;
		}

		.service-header {
			display: flex;
			justify-content: space-between;
			align-items: center;
			margin-bottom: 15px;
		}

		.service-title {
			color: #8bc34a;
			font-size: 18px;
			font-weight: 600;
		}

		.service-price {
			color: #ffffff;
			font-size: 16px;
			font-weight: 500;
		}

		.service-info {
			display: flex;
			justify-content: space-between;
			align-items: center;
			color: #b0b0b0;
			font-size: 14px;
			margin-bottom: 15px;
		}

		.service-actions {
			display: flex;
			justify-content: space-between;
			align-items: center;
			padding-top: 15px;
			border-top: 1px solid #4a4a4a;
		}

		.edit-btn {
			background: #8bc34a;
			color: #000000;
			border: none;
			padding: 8px 12px;
			border-radius: 6px;
			font-size: 14px;
			cursor: pointer;
			transition: background-color 0.3s ease;
			display: flex;
			align-items: center;
			gap: 5px;
		}

		.edit-btn:hover {
			background: #7cb342;
		}

		/* Toggle Switch - Yeniden Yazıldı */
		.toggle-switch-card {
			position: relative;
			display: inline-block;
		}

		.toggle-switch-card input[type="checkbox"] {
			opacity: 0;
			width: 44px;
			height: 24px;
			position: absolute;
			cursor: pointer;
			z-index: 1;
		}

		.toggle-slider {
			position: relative;
			display: inline-block;
			width: 44px;
			height: 24px;
			background-color: #666;
			border-radius: 24px;
			cursor: pointer;
			transition: background-color 0.3s;
		}

		.toggle-slider:before {
			position: absolute;
			content: "";
			height: 18px;
			width: 18px;
			left: 3px;
			top: 3px;
			background-color: white;
			border-radius: 50%;
			transition: transform 0.3s;
			box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
		}

		.toggle-switch-card input:checked+.toggle-slider {
			background-color: #8bc34a;
		}

		.toggle-switch-card input:checked+.toggle-slider:before {
			transform: translateX(20px);
		}

		.toggle-slider:hover {
			background-color: #555;
		}

		.toggle-switch-card input:checked+.toggle-slider:hover {
			background-color: #7cb342;
		}

		.service-duration {
			color: #8bc34a;
		}

		.service-status {
			padding: 4px 8px;
			border-radius: 4px;
			font-size: 12px;
			font-weight: 500;
			color: white;
		}

		.service-status.active {
			background: #28a745;
		}

		.service-status.inactive {
			background: #dc3545;
		}

		.no-services {
			text-align: center;
			padding: 60px 20px;
			color: #b0b0b0;
			font-size: 18px;
		}

		/* Time Offs Section Styles */
		.timeoffs-section {
			padding: 0 40px;
			margin-top: 50px;
		}

		.timeoffs-header {
			display: flex;
			justify-content: space-between;
			align-items: center;
			margin-bottom: 30px;
		}

		.timeoffs-list {
			display: grid;
			grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
			gap: 20px;
		}

		.timeoff-card {
			background: #2d2d2d;
			border-radius: 12px;
			padding: 20px;
			border: 1px solid #4a4a4a;
			transition: transform 0.3s ease, box-shadow 0.3s ease;
			position: relative;
		}

		.timeoff-card:hover {
			transform: translateY(-2px);
			box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
			border-color: #ff9800;
		}

		.timeoff-header {
			display: flex;
			justify-content: space-between;
			align-items: center;
			margin-bottom: 15px;
		}

		.timeoff-date {
			color: #ff9800;
			font-size: 18px;
			font-weight: 600;
		}

		.timeoff-duration {
			color: #ffffff;
			font-size: 14px;
			background: #4a4a4a;
			padding: 6px 12px;
			border-radius: 12px;
			font-weight: 500;
		}

		.timeoff-reason {
			color: #ffffff;
			font-size: 16px;
			margin-bottom: 10px;
		}

		.no-timeoffs {
			text-align: center;
			padding: 60px 20px;
			color: #b0b0b0;
			font-size: 18px;
		}

		.section-title {
			color: #ffffff;
			font-size: 24px;
			font-weight: 600;
			margin-bottom: 30px;
		}

		.appointments-list {
			display: grid !important;
			grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)) !important;
			gap: 15px !important;
			width: 100% !important;
			grid-auto-rows: auto !important;
		}

		.appointment-card {
			background: #2d2d2d;
			border-radius: 8px;
			padding: 15px;
			border: 1px solid #4a4a4a;
			transition: transform 0.3s ease, box-shadow 0.3s ease;
			width: 100%;
			min-width: 0;
			box-sizing: border-box;
		}

		.appointment-card:hover {
			transform: translateY(-2px);
			box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
		}

		.appointment-header {
			display: flex;
			flex-direction: column;
			margin-bottom: 12px;
			gap: 4px;
		}

		.customer-name {
			color: #8bc34a;
			font-size: 16px;
			font-weight: 600;
			line-height: 1.2;
		}

		.customer-type {
			color: #b0b0b0;
			font-size: 11px;
			font-style: italic;
		}

		.appointment-time {
			color: #ffffff;
			font-size: 13px;
			font-weight: 500;
			background: #3a3a3a;
			padding: 4px 8px;
			border-radius: 4px;
			align-self: flex-start;
		}

		.appointment-details {
			display: grid;
			grid-template-columns: 1fr 1fr;
			gap: 12px;
			margin-top: 12px;
		}

		.detail-item {
			color: #b0b0b0;
			font-size: 13px;
		}

		.detail-label {
			font-weight: 600;
			color: #ffffff;
			margin-bottom: 3px;
			font-size: 12px;
		}

		.service-name {
			color: #8bc34a;
			font-weight: 600;
		}

		.cancel-btn {
			background: #ff4444;
			color: white;
			border: none;
			padding: 6px 12px;
			border-radius: 4px;
			font-size: 12px;
			font-weight: 500;
			cursor: pointer;
			transition: background-color 0.3s ease;
			margin-top: 12px;
			width: 100%;
		}

		.cancel-btn:hover {
			background: #ff3333;
		}

		.cancel-btn:disabled {
			background: #666;
			cursor: not-allowed;
		}

		.error-message {
			background: #ff4444;
			color: white;
			padding: 15px;
			border-radius: 8px;
			text-align: center;
			margin: 20px 0;
		}

		.no-appointments {
			text-align: center;
			padding: 60px 20px;
			color: #b0b0b0;
			font-size: 18px;
		}

		.spinner-border {
			color: #8bc34a;
		}

		/* Modern Availability Styles */
		.availability-section {
			padding: 0 40px;
			margin-top: 50px;
		}

		.availability-header {
			display: flex;
			justify-content: space-between;
			align-items: center;
			margin-bottom: 30px;
			flex-wrap: wrap;
			gap: 20px;
		}

		.availability-form-container {
			background: linear-gradient(135deg, #2d2d2d 0%, #1a1a1a 100%);
			border-radius: 16px;
			padding: 30px;
			border: 1px solid #4a4a4a;
			box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
		}

		.days-grid {
			display: grid;
			grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
			gap: 20px;
			margin-bottom: 30px;
		}

		.day-card {
			background: linear-gradient(135deg, #3a3a3a 0%, #2a2a2a 100%);
			border-radius: 12px;
			padding: 20px;
			border: 2px solid #555;
			transition: all 0.3s ease;
			position: relative;
			overflow: hidden;
		}

		.day-card::before {
			content: '';
			position: absolute;
			top: 0;
			left: 0;
			right: 0;
			height: 3px;
			background: linear-gradient(90deg, #666, #555);
			transition: all 0.3s ease;
		}

		.day-card.active {
			border-color: #8bc34a;
			background: linear-gradient(135deg, #3d4a2a 0%, #2d3a1a 100%);
		}

		.day-card.active::before {
			background: linear-gradient(90deg, #8bc34a, #7cb342);
		}

		.day-header {
			display: flex;
			justify-content: space-between;
			align-items: center;
			margin-bottom: 15px;
		}

		.day-info h3 {
			color: #fff;
			margin: 0;
			font-size: 18px;
			font-weight: 600;
		}

		.day-status {
			font-size: 12px;
			padding: 4px 8px;
			border-radius: 12px;
			background: #666;
			color: #fff;
			margin-top: 4px;
			display: inline-block;
		}

		.day-card.active .day-status {
			background: #8bc34a;
			color: #000;
		}

		/* Modern Switch */
		.switch {
			position: relative;
			display: inline-block;
			width: 50px;
			height: 26px;
		}

		.switch input {
			opacity: 0;
			width: 0;
			height: 0;
		}

		.slider {
			position: absolute;
			cursor: pointer;
			top: 0;
			left: 0;
			right: 0;
			bottom: 0;
			background: linear-gradient(135deg, #666, #555);
			transition: all 0.3s ease;
			border-radius: 26px;
			box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.3);
		}

		.slider:before {
			position: absolute;
			content: "";
			height: 20px;
			width: 20px;
			left: 3px;
			top: 3px;
			background: linear-gradient(135deg, #fff, #f0f0f0);
			transition: all 0.3s ease;
			border-radius: 50%;
			box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
		}

		.switch input:checked+.slider {
			background: linear-gradient(135deg, #8bc34a, #7cb342);
			box-shadow: 0 0 20px rgba(139, 195, 74, 0.4);
		}

		.switch input:checked+.slider:before {
			transform: translateX(24px);
		}

		.time-selector {
			transition: all 0.4s ease;
			max-height: 0;
			overflow: hidden;
			opacity: 0;
		}

		.day-card.active .time-selector {
			max-height: 300px;
			opacity: 1;
		}

		.time-selector.hidden {
			display: none;
		}

		.day-card.active .time-selector.hidden {
			display: block;
		}

		.time-group {
			margin-bottom: 15px;
		}

		.time-group label {
			display: block;
			color: #8bc34a;
			font-weight: 600;
			margin-bottom: 8px;
			font-size: 14px;
		}

		.time-picker {
			width: 100%;
			background: linear-gradient(135deg, #1a1a1a, #2a2a2a);
			border: 2px solid #555;
			color: #fff;
			padding: 12px 15px;
			border-radius: 10px;
			font-size: 16px;
			transition: all 0.3s ease;
			cursor: pointer;
		}

		.time-picker:focus {
			outline: none;
			border-color: #8bc34a;
			box-shadow: 0 0 0 3px rgba(139, 195, 74, 0.2);
		}

		.form-actions-modern {
			text-align: center;
			margin-top: 30px;
		}

		.save-btn-modern {
			background: linear-gradient(135deg, #8bc34a, #7cb342);
			color: #000;
			border: none;
			padding: 15px 40px;
			border-radius: 12px;
			font-size: 16px;
			font-weight: 700;
			cursor: pointer;
			transition: all 0.3s ease;
			display: inline-flex;
			align-items: center;
			gap: 10px;
			box-shadow: 0 4px 15px rgba(139, 195, 74, 0.3);
		}

		.save-btn-modern:hover {
			transform: translateY(-2px);
			box-shadow: 0 8px 25px rgba(139, 195, 74, 0.4);
		}

		.btn-icon {
			font-size: 18px;
		}

		/* Flatpickr Dark Theme Customization */
		.flatpickr-calendar {
			background: #2d2d2d !important;
			border: 2px solid #8bc34a !important;
			border-radius: 12px !important;
			box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4) !important;
		}

		.flatpickr-time input {
			background: #1a1a1a !important;
			color: #8bc34a !important;
			border: 1px solid #555 !important;
			font-weight: 600 !important;
		}

		.flatpickr-time input:focus {
			border-color: #8bc34a !important;
		}

		.flatpickr-am-pm {
			background: #8bc34a !important;
			color: #000 !important;
			font-weight: 600 !important;
		}

		/* Responsive design */
		@media (max-width: 768px) {
			.dashboard-header {
				flex-direction: column;
				text-align: center;
				gap: 15px;
				padding: 0 20px;
			}

			.dashboard-title {
				font-size: 28px;
			}

			.appointments-section,
			.services-section,
			.timeoffs-section,
			.availability-section {
				padding: 0 20px;
			}

			/* Mobile layout - stack vertically */
			.appointments-container {
				flex-direction: column;
				gap: 15px;
			}

			.calendar-sidebar {
				flex: none;
				min-width: auto;
			}

			/* Mobile summary adjustments */
			.summary-stats {
				grid-template-columns: 1fr;
				gap: 10px;
			}

			.stat-item {
				padding: 10px;
			}

			.stat-number {
				font-size: 24px;
			}

			.stat-label {
				font-size: 12px;
			}

			.summary-info {
				padding-top: 15px;
			}

			.summary-info p {
				font-size: 12px;
			}

			/* Mobile modal adjustments */
			.day-appointments-modal {
				max-width: 95%;
				max-height: 90vh;
				margin: 20px;
				position: fixed;
				top: 50%;
				left: 50%;
				transform: translate(-50%, -50%);
			}

			.day-appointment-details {
				grid-template-columns: 1fr;
				gap: 6px;
			}

			.appointments-list {
				grid-template-columns: 1fr;
				gap: 12px;
			}

			.appointment-details {
				grid-template-columns: 1fr;
				gap: 8px;
			}

			.appointment-card {
				padding: 12px;
				max-width: none;
			}

			.services-list {
				grid-template-columns: 1fr;
			}

			.timeoffs-list {
				grid-template-columns: 1fr;
			}

			.services-header {
				flex-direction: column;
				gap: 15px;
				align-items: stretch;
			}

			.modal-content {
				width: 95%;
				margin: 10px;
			}

			.form-actions {
				flex-direction: column;
			}

			.days-grid {
				grid-template-columns: 1fr;
			}

			.modal-content {
				width: 95%;
				margin: 10px;
			}

			.form-actions {
				flex-direction: column;
			}
		}
	</style>
	<script>
		let services = [];
		let myServices = [];

		document.addEventListener('DOMContentLoaded', async function () {
			// Check if user is authenticated and is a barber
			const isAuthenticated = await checkUserAuthentication();
			if (!isAuthenticated) {
				window.location.href = '/login';
				return;
			}

			// Initialize calendar filter
			initializeCalendarFilter();

			// Fetch barber's data
			fetchMyAppointments();
			await fetchAllServices();
			fetchMyServices();
			fetchMyTimeOffs();
			fetchCurrentAvailabilityForEdit();

			// Setup event listeners
			setupEventListeners();
		});

		function setupEventListeners() {
			// Modal click outside to close
			window.onclick = function (event) {
				const addModal = document.getElementById('addServiceModal');
				const editModal = document.getElementById('editServiceModal');
				const addTimeOffModal = document.getElementById('addTimeOffModal');

				if (event.target === addModal) {
					hideAddServiceModal();
				}
				if (event.target === editModal) {
					hideEditServiceModal();
				}
				if (event.target === addTimeOffModal) {
					hideAddTimeOffModal();
				}
			}

			// Add service form submit handler
			const addForm = document.getElementById('addServiceForm');
			if (addForm) {
				addForm.addEventListener('submit', handleAddServiceSubmit);
			}

			// Edit service form submit handler
			const editForm = document.getElementById('editServiceForm');
			if (editForm) {
				editForm.addEventListener('submit', handleEditServiceSubmit);
			}

			// Add time off form submit handler
			const addTimeOffForm = document.getElementById('addTimeOffForm');
			if (addTimeOffForm) {
				addTimeOffForm.addEventListener('submit', handleAddTimeOffSubmit);
			}

			// Add appointment form submit handler
			const addAppointmentForm = document.getElementById('addAppointmentForm');
			if (addAppointmentForm) {
				addAppointmentForm.addEventListener('submit', handleAddAppointmentSubmit);
			}
		}

		async function handleAddServiceSubmit(e) {
			e.preventDefault();

			const serviceId = document.getElementById('serviceSelect').value;
			const price = parseFloat(document.getElementById('servicePrice').value);
			const duration = parseInt(document.getElementById('serviceDuration').value);

			// Validation
			if (!serviceId) {
				alert('Lütfen bir hizmet seçin');
				return;
			}
			if (!price || price <= 0) {
				alert('Lütfen geçerli bir fiyat girin');
				return;
			}
			if (!duration || duration <= 0) {
				alert('Lütfen geçerli bir süre girin');
				return;
			}

			// Bu kontrole artık gerek yok çünkü dropdown zaten filtrelenmiş hizmetleri gösteriyor
			// Ama güvenlik için bırakabiliriz
			const existingService = myServices.find(s => s.service && s.service._id === serviceId);
			if (existingService) {
				alert('Bu hizmet zaten mevcut');
				return;
			}

			try {
				const response = await fetch('/api/barbers/me/services', {
					method: 'PUT',
					headers: {
						'Content-Type': 'application/json'
					},
					credentials: 'include',
					body: JSON.stringify({
						servicesOffered: [{
							service: serviceId,
							price: price,
							duration: duration,
							isActive: true
						}]
					})
				});

				if (response.ok) {
					hideAddServiceModal();
					await fetchMyServices(); // Refresh services list
					alert('Hizmet başarıyla eklendi!');
				} else {
					const error = await response.json();
					throw new Error(error.message || 'Hizmet eklenirken hata oluştu');
				}
			} catch (error) {
				console.error('Error:', error);
				alert('Hizmet eklenirken hata oluştu: ' + error.message);
			}
		}

		async function checkUserAuthentication() {
			try {
				const response = await fetch('/profile/me', {
					credentials: 'include'
				});

				if (response.ok) {
					const userData = await response.json();
					if (userData.role === 'barber') {
						document.getElementById('welcomeMessage').textContent =
							`Hoş geldiniz, ${userData.name} ${userData.surname}!`;
						return true;
					} else {
						alert('Bu sayfaya erişim yetkiniz yok. Sadece berberler bu paneli kullanabilir.');
						window.location.href = '/';
						return false;
					}
				}
				return false;
			} catch (error) {
				console.error('Authentication check failed:', error);
				return false;
			}
		}

		async function fetchAllServices() {
			try {
				const response = await fetch('/api/services');
				if (!response.ok) {
					throw new Error('Hizmetler alınamadı');
				}
				services = await response.json();
				populateServiceDropdown();
			} catch (error) {
				console.error('Error fetching services:', error);
			}
		}

		function populateServiceDropdown() {
			const select = document.getElementById('serviceSelect');
			if (select) {
				select.innerHTML = '<option value="">Hizmet seçiniz...</option>';

				// Berberin zaten eklediği hizmetlerin ID'lerini al
				const addedServiceIds = myServices.map(serviceOffered =>
					serviceOffered.service ? serviceOffered.service._id : null
				).filter(id => id !== null);

				// Sadece henüz eklenmemiş hizmetleri göster
				const availableServices = services.filter(service =>
					!addedServiceIds.includes(service._id)
				);

				if (availableServices.length === 0) {
					const option = document.createElement('option');
					option.value = '';
					option.textContent = 'Eklenebilecek hizmet bulunmuyor';
					option.disabled = true;
					select.appendChild(option);
				} else {
					availableServices.forEach(service => {
						const option = document.createElement('option');
						option.value = service._id;
						option.textContent = service.name;
						select.appendChild(option);
					});
				}
			}
		}

		async function fetchMyAppointments() {
			const loading = document.getElementById('appointmentsLoading');
			const errorMessage = document.getElementById('appointmentsError');
			const appointmentsSummary = document.getElementById('appointmentsSummary');
			const noAppointments = document.getElementById('noAppointments');

			try {
				const response = await fetch('/api/appointments/my-appointments', {
					credentials: 'include'
				});

				loading.style.display = 'none';

				if (response.ok) {
					const appointments = await response.json();

					// Store appointments for calendar filter
					allAppointments = appointments;

					if (appointments.length > 0) {
						appointmentsSummary.style.display = 'block';
						renderAppointmentsSummary(appointments);

						// Update calendar to show appointment indicators
						if (typeof renderFilterCalendar === 'function') {
							renderFilterCalendar();
						}
					} else {
						noAppointments.style.display = 'block';
					}
				} else if (response.status === 401) {
					window.location.href = '/login';
				} else {
					errorMessage.textContent = 'Randevular yüklenirken bir hata oluştu.';
					errorMessage.style.display = 'block';
				}
			} catch (error) {
				loading.style.display = 'none';
				errorMessage.textContent = 'Randevular yüklenirken bir hata oluştu.';
				errorMessage.style.display = 'block';
				console.error('Error fetching appointments:', error);
			}
		}

		function renderAppointments(appointments) {
			const appointmentsList = document.getElementById('appointmentsList');
			appointmentsList.innerHTML = '';

			appointments.forEach(appointment => {
				const rawStart = appointment.startTime;
				const dateObj = new Date(rawStart);
				// Eğer DB ISO değeri zaman dilimi içeriyorsa (Z veya +/-), UTC olarak göster ki DB'deki saat aynen yansısın
				const hasTZ = typeof rawStart === 'string' && (rawStart.endsWith('Z') || /[+-]\d{2}:?\d{2}$/.test(rawStart));
				const dateFormatOpts = { day: 'numeric', month: 'long', year: 'numeric' };
				const timeFormatOpts = { hour: '2-digit', minute: '2-digit', hour12: false };
				if (hasTZ) {
					dateFormatOpts.timeZone = 'UTC';
					timeFormatOpts.timeZone = 'UTC';
				}
				const formattedDate = dateObj.toLocaleDateString('tr-TR', dateFormatOpts);
				const formattedTime = dateObj.toLocaleTimeString('tr-TR', timeFormatOpts);

				// Müşteri bilgilerini belirle (kayıtlı kullanıcı veya misafir)
				let customerName, customerInfo;
				if (appointment.customer) {
					// Kayıtlı kullanıcı
					customerName = `${appointment.customer.name} ${appointment.customer.surname}`;
					customerInfo = 'Kayıtlı Müşteri';
				} else if (appointment.guestName) {
					// Misafir randevu
					customerName = `${appointment.guestName} ${appointment.guestSurname}`;
					customerInfo = `Misafir - ${appointment.guestPhoneNumber}`;
				} else {
					// Fallback durumu
					customerName = 'Müşteri Bilgisi Bulunamadı';
					customerInfo = 'Bilinmeyen';
				}

				const appointmentCard = document.createElement('div');
				appointmentCard.className = 'appointment-card';
				appointmentCard.innerHTML = `
                <div class="appointment-header">
                    <div class="customer-name">${customerName}</div>
                    <div class="appointment-time">${formattedDate} - ${formattedTime}</div>
                </div>
                <div class="appointment-details">
                    <div class="detail-item">
                        <div class="detail-label">Müşteri Tipi:</div>
                        <div class="customer-type">${customerInfo}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Hizmet:</div>
                        <div class="service-name">${appointment.service.name}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Süre:</div>
                        <div>${appointment.service.duration} dakika</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Durum:</div>
                        <div>Planlandı</div>
                    </div>
                </div>
                <button class="cancel-btn" onclick="cancelAppointment('${appointment._id}')" id="cancel-${appointment._id}">
                    Randevuyu İptal Et
                </button>
            `;

				appointmentsList.appendChild(appointmentCard);
			});
		}

		async function cancelAppointment(appointmentId) {
			const cancelBtn = document.getElementById(`cancel-${appointmentId}`);

			if (!confirm('Bu randevuyu iptal etmek istediğinizden emin misiniz?')) {
				return;
			}

			// Disable button during request
			cancelBtn.disabled = true;
			cancelBtn.textContent = 'İptal ediliyor...';

			try {
				const response = await fetch(`/api/appointments/${appointmentId}`, {
					method: 'DELETE',
					credentials: 'include'
				});

				if (response.ok) {
					// Remove the appointment card from the UI
					const appointmentCard = cancelBtn.closest('.appointment-card');
					appointmentCard.remove();

					// Check if there are any appointments left
					const remainingAppointments = document.querySelectorAll('.appointment-card');
					if (remainingAppointments.length === 0) {
						document.getElementById('appointmentsList').style.display = 'none';
						document.getElementById('noAppointments').style.display = 'block';
					}

					alert('Randevu başarıyla iptal edildi.');
				} else {
					const errorData = await response.json();
					alert('Randevu iptal edilirken hata oluştu: ' + (errorData.message || 'Bilinmeyen hata'));

					// Re-enable button on error
					cancelBtn.disabled = false;
					cancelBtn.textContent = 'Randevuyu İptal Et';
				}
			} catch (error) {
				console.error('Error canceling appointment:', error);
				alert('Randevu iptal edilirken bir hata oluştu.');

				// Re-enable button on error
				cancelBtn.disabled = false;
				cancelBtn.textContent = 'Randevuyu İptal Et';
			}
		}

		async function fetchMyServices() {
			const loading = document.getElementById('servicesLoading');
			const errorMessage = document.getElementById('servicesError');
			const servicesList = document.getElementById('servicesList');
			const noServices = document.getElementById('noServices');

			try {
				const response = await fetch('/api/barbers/me/services', {
					credentials: 'include'
				});

				loading.style.display = 'none';

				if (response.ok) {
					const servicesData = await response.json();
					myServices = servicesData;

					if (servicesData.length > 0) {
						servicesList.style.display = 'grid';
						renderServices(servicesData);
					} else {
						noServices.style.display = 'block';
					}

					// Dropdown'u güncelle (mevcut hizmetler değiştiği için)
					populateServiceDropdown();
				} else if (response.status === 401) {
					window.location.href = '/login';
				} else {
					errorMessage.textContent = 'Hizmetler yüklenirken bir hata oluştu.';
					errorMessage.style.display = 'block';
				}
			} catch (error) {
				loading.style.display = 'none';
				errorMessage.textContent = 'Hizmetler yüklenirken bir hata oluştu.';
				errorMessage.style.display = 'block';
				console.error('Error fetching services:', error);
			}
		}

		function renderServices(services) {
			const servicesList = document.getElementById('servicesList');
			servicesList.innerHTML = '';

			services.forEach((serviceOffered, index) => {
				// API'den gelen veri yapısına göre service bilgilerini al
				let service, serviceName, serviceDuration, serviceId;

				if (serviceOffered.service) {
					// Populate edilmiş durumda
					service = serviceOffered.service;
					serviceName = service.name || 'İsimsiz Hizmet';
					serviceDuration = serviceOffered.duration || service.duration || 'Belirsiz';
					serviceId = service._id;
				} else {
					// Direkt serviceOffered içinde bilgiler var
					serviceName = serviceOffered.name || 'İsimsiz Hizmet';
					serviceDuration = serviceOffered.duration || 'Belirsiz';
					serviceId = serviceOffered._id;
				}

				// isActive durumuna göre status text ve class belirle
				const statusText = serviceOffered.isActive ? 'Aktif' : 'Deaktif';
				const statusClass = serviceOffered.isActive ? 'active' : 'inactive';

				const serviceCard = document.createElement('div');
				serviceCard.className = 'service-card';
				serviceCard.setAttribute('data-service-id', serviceId);
				serviceCard.setAttribute('data-service-index', index);

				serviceCard.innerHTML = `
					<div class="service-header">
						<div class="service-title">${serviceName}</div>
						<div class="service-price">${serviceOffered.price || 0}₺</div>
					</div>
					<div class="service-info">
						<div class="service-duration">${serviceDuration} dakika</div>
						<div class="service-status ${statusClass}">${statusText}</div>
					</div>
					<div class="service-actions">
						<button class="edit-btn" onclick="openEditServiceModal('${serviceId}', ${index})" title="Düzenle">
							<i class="fas fa-edit"></i> Düzenle
						</button>
						<div class="toggle-switch-card">
							<input type="checkbox" id="toggle-${serviceId}" ${serviceOffered.isActive ? 'checked' : ''} onchange="toggleServiceStatus('${serviceId}', ${index})">
							<span class="toggle-slider"></span>
						</div>
					</div>
				`;

				servicesList.appendChild(serviceCard);
			});

			// Debug için console.log ekleyelim
			console.log('Services data:', services);
		}

		async function fetchMyTimeOffs() {
			const loading = document.getElementById('timeOffsLoading');
			const errorMessage = document.getElementById('timeOffsError');
			const timeOffsList = document.getElementById('timeOffsList');
			const noTimeOffs = document.getElementById('noTimeOffs');

			try {
				const response = await fetch('/api/barbers/me/timeOffs', {
					credentials: 'include'
				});

				loading.style.display = 'none';

				if (response.ok) {
					const timeOffsData = await response.json();

					// Past end dates should not be shown
					const now = new Date();
					const upcomingOrOngoing = timeOffsData.filter(to => {
						let end = null;
						if (to.endTime) {
							end = new Date(to.endTime);
						} else if (to.endDate) {
							end = new Date(to.endDate);
							// If only a date is provided, consider the end of that day
							end.setHours(23, 59, 59, 999);
						}
						// If no end provided, keep it (defensive)
						if (!end || isNaN(end.getTime())) return true;
						return end >= now;
					});

					if (upcomingOrOngoing.length > 0) {
						timeOffsList.style.display = 'grid';
						renderTimeOffs(upcomingOrOngoing);
					} else {
						// Clear any previous items and show empty state
						timeOffsList.innerHTML = '';
						timeOffsList.style.display = 'none';
						noTimeOffs.style.display = 'block';
					}
				} else if (response.status === 401) {
					window.location.href = '/login';
				} else {
					errorMessage.textContent = 'İzin günleri yüklenirken bir hata oluştu.';
					errorMessage.style.display = 'block';
				}
			} catch (error) {
				loading.style.display = 'none';
				errorMessage.textContent = 'İzin günleri yüklenirken bir hata oluştu.';
				errorMessage.style.display = 'block';
				console.error('Error fetching time offs:', error);
			}
		}

		function renderTimeOffs(timeOffs) {
			const timeOffsList = document.getElementById('timeOffsList');
			timeOffsList.innerHTML = '';

			timeOffs.forEach(timeOff => {
				const startDate = new Date(timeOff.startTime || timeOff.startDate);
				const endDate = new Date(timeOff.endTime || timeOff.endDate);

				const formatDate = (date) => {
					return date.toLocaleDateString('tr-TR', {
						day: 'numeric',
						month: 'long',
						year: 'numeric'
					});
				};

				const formatTime = (date) => {
					return date.toLocaleTimeString('tr-TR', {
						hour: '2-digit',
						minute: '2-digit'
					});
				};

				// Calculate date range display
				const startDateOnly = new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate());
				const endDateOnly = new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate());
				const dayDifference = Math.ceil((endDateOnly - startDateOnly) / (1000 * 60 * 60 * 24));

				let dateDisplay;
				let durationDisplay;

				if (dayDifference === 0) {
					// Same day
					dateDisplay = formatDate(startDate);
					durationDisplay = `${formatTime(startDate)} - ${formatTime(endDate)}`;
				} else {
					// Multiple days
					dateDisplay = `${formatDate(startDate)} - ${formatDate(endDate)}`;
					durationDisplay = `${dayDifference + 1} gün`;
				}

				const timeOffCard = document.createElement('div');
				timeOffCard.className = 'timeoff-card';

				timeOffCard.innerHTML = `
					<div class="timeoff-header">
						<div class="timeoff-date">${dateDisplay}</div>
						<div class="timeoff-duration">${durationDisplay}</div>
					</div>
					${timeOff.reason ? `<div class="timeoff-reason">${timeOff.reason}</div>` : ''}
				`;

				timeOffsList.appendChild(timeOffCard);
			});
		}

		function showAddServiceModal() {
			document.getElementById('addServiceModal').style.display = 'block';
			document.body.style.overflow = 'hidden';
		}

		function hideAddServiceModal() {
			document.getElementById('addServiceModal').style.display = 'none';
			document.body.style.overflow = 'auto';
			// Reset form
			document.getElementById('addServiceForm').reset();
		}

		let currentEditingService = null;

		function openEditServiceModal(serviceId, serviceIndex) {
			const serviceOffered = myServices[serviceIndex];
			const service = serviceOffered.service;
			currentEditingService = serviceOffered;

			// Form alanlarını doldur
			document.getElementById('editServiceName').value = service.name;
			document.getElementById('editServicePrice').value = serviceOffered.price;
			document.getElementById('editServiceDuration').value = serviceOffered.duration;

			// Modal'ı göster
			document.getElementById('editServiceModal').style.display = 'block';
			document.body.style.overflow = 'hidden';
		}

		async function toggleServiceStatus(serviceId, serviceIndex) {
			try {
				const response = await fetch(`/api/barbers/me/services/${serviceId}/toggle`, {
					method: 'PATCH',
					credentials: 'include'
				});

				if (response.ok) {
					// Update local data
					myServices[serviceIndex].isActive = !myServices[serviceIndex].isActive;

					// Update UI
					await fetchMyServices();

					const statusText = myServices[serviceIndex].isActive ? 'Aktif' : 'Deaktif';
					console.log(`Hizmet durumu güncellendi: ${statusText}`);
				} else {
					const error = await response.json();
					alert('Hizmet durumu güncellenirken hata oluştu: ' + (error.message || 'Bilinmeyen hata'));

					// Revert toggle state
					const toggle = document.getElementById(`toggle-${serviceId}`);
					if (toggle) {
						toggle.checked = !toggle.checked;
					}
				}
			} catch (error) {
				console.error('Error toggling service status:', error);
				alert('Hizmet durumu güncellenirken bir hata oluştu.');

				// Revert toggle state
				const toggle = document.getElementById(`toggle-${serviceId}`);
				if (toggle) {
					toggle.checked = !toggle.checked;
				}
			}
		}

		function hideEditServiceModal() {
			document.getElementById('editServiceModal').style.display = 'none';
			document.body.style.overflow = 'auto';
			currentEditingService = null;
			// Reset form
			document.getElementById('editServiceForm').reset();
		}

		async function handleEditServiceSubmit(e) {
			e.preventDefault();

			if (!currentEditingService) {
				alert('Düzenlenecek hizmet bulunamadı');
				return;
			}

			const price = parseFloat(document.getElementById('editServicePrice').value);
			const duration = parseInt(document.getElementById('editServiceDuration').value);

			// Validation
			if (!price || price <= 0) {
				alert('Lütfen geçerli bir fiyat girin');
				return;
			}
			if (!duration || duration <= 0) {
				alert('Lütfen geçerli bir süre girin');
				return;
			}

			try {
				// Price ve duration güncellemesi
				const updateResponse = await fetch(`/api/barbers/me/services/${currentEditingService.service._id}`, {
					method: 'PATCH',
					headers: {
						'Content-Type': 'application/json'
					},
					credentials: 'include',
					body: JSON.stringify({
						price: price,
						duration: duration
					})
				});

				if (!updateResponse.ok) {
					const error = await updateResponse.json();
					throw new Error(error.message || 'Hizmet güncellenirken hata oluştu');
				}

				hideEditServiceModal();
				await fetchMyServices(); // Refresh services list
				alert('Hizmet başarıyla güncellendi!');

			} catch (error) {
				console.error('Error:', error);
				alert('Hizmet güncellenirken hata oluştu: ' + error.message);
			}
		}

		// Time Off Management Functions
		function showAddTimeOffModal() {
			document.getElementById('addTimeOffModal').style.display = 'block';
			document.body.style.overflow = 'hidden';

			// Set minimum date to today
			const today = new Date().toISOString().split('T')[0];
			const startDateInput = document.getElementById('timeOffStartDate');
			const endDateInput = document.getElementById('timeOffEndDate');

			startDateInput.min = today;
			endDateInput.min = today;

			// Update end date minimum when start date changes
			startDateInput.addEventListener('change', function () {
				endDateInput.min = this.value;
				if (endDateInput.value && endDateInput.value < this.value) {
					endDateInput.value = this.value;
				}
			});

			// Initialize time pickers with availability-style functionality
			initializeTimeOffTimePickers();
		}

		function hideAddTimeOffModal() {
			document.getElementById('addTimeOffModal').style.display = 'none';
			document.body.style.overflow = 'auto';
			// Reset form
			document.getElementById('addTimeOffForm').reset();
		}

		async function handleAddTimeOffSubmit(e) {
			e.preventDefault();

			const startDate = document.getElementById('timeOffStartDate').value;
			const endDate = document.getElementById('timeOffEndDate').value;
			const startTime = document.getElementById('timeoff-start-time').value;
			const endTime = document.getElementById('timeoff-end-time').value;
			const reason = document.getElementById('timeOffReason').value.trim();

			// Validation
			if (!startDate) {
				alert('Lütfen başlangıç tarihi seçin');
				return;
			}
			if (!endDate) {
				alert('Lütfen bitiş tarihi seçin');
				return;
			}
			if (!startTime) {
				alert('Lütfen başlangıç saati seçin');
				return;
			}
			if (!endTime) {
				alert('Lütfen bitiş saati seçin');
				return;
			}
			if (!reason) {
				alert('Lütfen izin sebebini yazın');
				return;
			}

			// Check if end date is not before start date
			if (new Date(endDate) < new Date(startDate)) {
				alert('Bitiş tarihi başlangıç tarihinden önce olamaz');
				return;
			}

			// Check if same day and end time is not after start time
			if (startDate === endDate && endTime <= startTime) {
				alert('Bitiş saati başlangıç saatinden sonra olmalı');
				return;
			}

			try {
				// Create ISO datetime strings
				const startDateTime = new Date(`${startDate}T${startTime}:00`);
				const endDateTime = new Date(`${endDate}T${endTime}:00`);

				const requestBody = {
					reason: reason,
					startTime: startDateTime.toISOString(),
					endTime: endDateTime.toISOString()
				};

				const response = await fetch('/api/barbers/me/timeOffs', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					},
					credentials: 'include',
					body: JSON.stringify(requestBody)
				});

				if (response.ok) {
					hideAddTimeOffModal();
					await fetchMyTimeOffs(); // Refresh time offs list
					alert('İzin başvurusu başarıyla gönderildi!');
				} else {
					const error = await response.json();
					throw new Error(error.message || 'İzin eklenirken hata oluştu');
				}
			} catch (error) {
				console.error('Error:', error);
				alert('İzin eklenirken hata oluştu: ' + error.message);
			}
		}

		// Manual Appointment Management Functions
		function showAddAppointmentModal() {
			document.getElementById('addAppointmentModal').style.display = 'block';
			document.body.style.overflow = 'hidden';

			// Set minimum date to today
			const today = new Date().toISOString().split('T')[0];
			document.getElementById('appointmentDate').min = today;

			// Load customers and services
			loadCustomersForAppointment();
			loadServicesForAppointment();

			// Initialize time picker
			initializeAppointmentTimePicker();
		}

		function hideAddAppointmentModal() {
			document.getElementById('addAppointmentModal').style.display = 'none';
			document.body.style.overflow = 'auto';
			// Reset form
			document.getElementById('addAppointmentForm').reset();
			// Reset to registered customer tab
			switchCustomerType('registered');
		}

		function switchCustomerType(type) {
			const registeredTab = document.getElementById('registeredTab');
			const guestTab = document.getElementById('guestTab');
			const registeredSection = document.getElementById('registeredCustomerSection');
			const guestSection = document.getElementById('guestCustomerSection');

			if (type === 'registered') {
				registeredTab.classList.add('active');
				guestTab.classList.remove('active');
				registeredSection.style.display = 'block';
				guestSection.style.display = 'none';

				// Clear guest inputs
				document.getElementById('guestName').value = '';
				document.getElementById('guestSurname').value = '';
				document.getElementById('guestPhone').value = '';
			} else {
				guestTab.classList.add('active');
				registeredTab.classList.remove('active');
				guestSection.style.display = 'block';
				registeredSection.style.display = 'none';

				// Clear registered customer selection and search
				document.getElementById('customerId').value = '';
				document.getElementById('customerSearch').value = '';
				document.getElementById('selectedCustomerInfo').style.display = 'none';
			}
		}

		async function loadCustomersForAppointment() {
			// Artık otomatik yükleme yapmıyoruz, sadece arama ile çalışıyor
			return;
		}

		// Müşteri arama fonksiyonu
		async function searchCustomers(searchTerm) {
			const customerIdInput = document.getElementById('customerId');
			const selectedCustomerInfo = document.getElementById('selectedCustomerInfo');

			// Bilgi alanını temizle
			selectedCustomerInfo.style.display = 'none';
			selectedCustomerInfo.className = 'selected-customer-info';
			customerIdInput.value = '';

			if (!searchTerm || searchTerm.length < 3) {
				return;
			}

			try {
				// Telefon numarası ile direkt arama yap
				const response = await fetch(`/profile/search?phone=${encodeURIComponent(searchTerm)}`, {
					credentials: 'include'
				});

				if (response.ok) {
					const customer = await response.json();
					// Tek müşteri bulundu, otomatik seç
					customerIdInput.value = customer._id;
					selectedCustomerInfo.textContent = `✓ Seçilen Müşteri: ${customer.name} ${customer.surname} - ${searchTerm}`;
					selectedCustomerInfo.className = 'selected-customer-info success';
					selectedCustomerInfo.style.display = 'block';
				} else if (response.status === 404) {
					selectedCustomerInfo.textContent = '⚠ Bu telefon numarası ile kayıtlı müşteri bulunamadı';
					selectedCustomerInfo.className = 'selected-customer-info error';
					selectedCustomerInfo.style.display = 'block';
				} else {
					selectedCustomerInfo.textContent = '❌ Arama sırasında hata oluştu';
					selectedCustomerInfo.className = 'selected-customer-info error';
					selectedCustomerInfo.style.display = 'block';
				}
			} catch (error) {
				console.error('Error searching customers:', error);
				selectedCustomerInfo.textContent = '❌ Arama sırasında hata oluştu';
				selectedCustomerInfo.className = 'selected-customer-info error';
				selectedCustomerInfo.style.display = 'block';
			}
		}

		async function loadServicesForAppointment() {
			try {
				const response = await fetch('/api/barbers/me/services', {
					credentials: 'include'
				});

				if (response.ok) {
					const services = await response.json();
					const serviceSelect = document.getElementById('appointmentServiceId');
					serviceSelect.innerHTML = '<option value="">Hizmet seçin...</option>';

					services.forEach(serviceOffered => {
						// API'den gelen veri yapısına göre service bilgilerini al
						let serviceName, serviceDuration, serviceId;

						if (serviceOffered.service) {
							// Populate edilmiş durumda
							serviceName = serviceOffered.service.name || 'İsimsiz Hizmet';
							serviceDuration = serviceOffered.duration || serviceOffered.service.duration || 'Belirsiz';
							serviceId = serviceOffered.service._id;
						} else {
							// Direkt serviceOffered içinde bilgiler var
							serviceName = serviceOffered.name || 'İsimsiz Hizmet';
							serviceDuration = serviceOffered.duration || 'Belirsiz';
							serviceId = serviceOffered._id;
						}

						const option = document.createElement('option');
						option.value = serviceId;
						option.textContent = `${serviceName} (${serviceDuration} dk)`;
						serviceSelect.appendChild(option);
					});

					// Debug için console.log ekleyelim
					console.log('Services for appointment:', services);
				}
			} catch (error) {
				console.error('Error loading services:', error);
			}
		}

		function initializeAppointmentTimePicker() {
			const timeInput = document.getElementById('appointmentTime');

			// Initialize Flatpickr for appointment time
			flatpickr(timeInput, {
				enableTime: true,
				noCalendar: true,
				dateFormat: "H:i",
				time_24hr: true,
				defaultHour: 9,
				defaultMinute: 0,
				minuteIncrement: 15,
				locale: "tr",
				theme: "dark"
			});
		}

		async function handleAddAppointmentSubmit(e) {
			e.preventDefault();

			const registeredTab = document.getElementById('registeredTab');
			const isRegistered = registeredTab.classList.contains('active');

			let appointmentData = {
				serviceId: document.getElementById('appointmentServiceId').value,
				startTime: `${document.getElementById('appointmentDate').value}T${document.getElementById('appointmentTime').value}:00`
			};

			// Validation
			if (!appointmentData.serviceId) {
				alert('Lütfen bir hizmet seçin');
				return;
			}

			if (!document.getElementById('appointmentDate').value || !document.getElementById('appointmentTime').value) {
				alert('Lütfen tarih ve saat seçin');
				return;
			}

			if (isRegistered) {
				const customerId = document.getElementById('customerId').value;
				if (!customerId) {
					alert('Lütfen bir müşteri seçin');
					return;
				}
				appointmentData.customerId = customerId;
			} else {
				const guestName = document.getElementById('guestName').value.trim();
				const guestSurname = document.getElementById('guestSurname').value.trim();
				const guestPhone = document.getElementById('guestPhone').value.trim();

				if (!guestName || !guestSurname || !guestPhone) {
					alert('Lütfen tüm misafir bilgilerini doldurun');
					return;
				}

				appointmentData.guestName = guestName;
				appointmentData.guestSurname = guestSurname;
				appointmentData.guestPhone = guestPhone;
			}

			try {
				const response = await fetch('/api/appointments/by-barber', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					},
					credentials: 'include',
					body: JSON.stringify(appointmentData)
				});

				if (response.ok) {
					hideAddAppointmentModal();
					await fetchMyAppointments(); // Refresh appointments list
					alert('Randevu başarıyla oluşturuldu!');
				} else {
					const error = await response.json();
					throw new Error(error.message || 'Randevu oluşturulurken hata oluştu');
				}
			} catch (error) {
				console.error('Error:', error);
				alert('Randevu oluşturulurken hata oluştu: ' + error.message);
			}
		}

		// Availability Management Functions
		async function fetchCurrentAvailabilityForEdit() {
			try {
				const response = await fetch('/api/barbers/me/availability', {
					method: 'GET',
					credentials: 'include'
				});

				if (response.ok) {
					const data = await response.json();
					console.log('Availability data for edit:', data); // Debug için
					populateAvailabilityForm(data);
					// Re-initialize day cards after populating form to ensure proper states
					setTimeout(() => {
						initializeDayCards();
					}, 100);
				}
			} catch (error) {
				console.error('Error fetching availability for edit:', error);
			}
		}
		async function fetchCurrentAvailabilityForEdit() {
			try {
				const response = await fetch('/api/barbers/me/availability', {
					method: 'GET',
					credentials: 'include'
				});

				if (response.ok) {
					const data = await response.json();
					console.log('Availability data for edit:', data); // Debug için
					populateAvailabilityForm(data);
				}
			} catch (error) {
				console.error('Error fetching availability for edit:', error);
			}
		}

		function populateAvailabilityForm(availability) {
			const dayMapping = {
				1: 'monday',
				2: 'tuesday',
				3: 'wednesday',
				4: 'thursday',
				5: 'friday',
				6: 'saturday',
				0: 'sunday'
			};

			// Create availability lookup object
			const availabilityByDay = {};
			if (availability && Array.isArray(availability)) {
				availability.forEach(item => {
					availabilityByDay[item.dayOfWeek] = item;
				});
			}

			// Fill form for each day
			Object.keys(dayMapping).forEach(dayNum => {
				const dayName = dayMapping[dayNum];
				const checkbox = document.getElementById(`${dayName}-enabled`);
				const startInput = document.getElementById(`${dayName}-start`);
				const endInput = document.getElementById(`${dayName}-end`);
				const dayCard = document.querySelector(`[data-day="${dayName}"]`);
				const timeSelector = dayCard?.querySelector('.time-selector');
				const dayStatusSpan = dayCard?.querySelector('.day-status');

				const dayData = availabilityByDay[parseInt(dayNum)];

				if (dayData && dayData.startTime && dayData.endTime) {
					checkbox.checked = true;
					startInput.value = dayData.startTime;
					endInput.value = dayData.endTime;

					// Ensure the day card is active and time selector is visible
					if (dayCard) {
						dayCard.classList.add('active');
						if (timeSelector) timeSelector.classList.remove('hidden');
						if (dayStatusSpan) dayStatusSpan.textContent = 'Açık';
					}
				} else {
					checkbox.checked = false;
					startInput.value = '';
					endInput.value = '';

					// Ensure the day card is inactive and time selector is hidden
					if (dayCard) {
						dayCard.classList.remove('active');
						if (timeSelector) timeSelector.classList.add('hidden');
						if (dayStatusSpan) dayStatusSpan.textContent = 'Kapalı';
					}
				}
			});
		}

		async function handleAvailabilitySubmit(event) {
			event.preventDefault();

			const dayMapping = {
				'monday': 1,
				'tuesday': 2,
				'wednesday': 3,
				'thursday': 4,
				'friday': 5,
				'saturday': 6,
				'sunday': 0
			};

			const availability = [];

			Object.keys(dayMapping).forEach(dayName => {
				const checkbox = document.getElementById(`${dayName}-enabled`);
				const startInput = document.getElementById(`${dayName}-start`);
				const endInput = document.getElementById(`${dayName}-end`);

				if (checkbox.checked && startInput.value && endInput.value) {
					availability.push({
						dayOfWeek: dayMapping[dayName],
						startTime: startInput.value,
						endTime: endInput.value
					});
				}
			});

			try {
				const response = await fetch('/api/barbers/me/availability', {
					method: 'PUT',
					headers: {
						'Content-Type': 'application/json'
					},
					credentials: 'include',
					body: JSON.stringify({
						availability: availability
					})
				});

				if (response.ok) {
					await fetchCurrentAvailabilityForEdit(); // Refresh form data
					alert('Çalışma saatleri başarıyla güncellendi!');
				} else {
					const error = await response.json();
					throw new Error(error.message || 'Çalışma saatleri güncellenirken hata oluştu');
				}
			} catch (error) {
				console.error('Error updating availability:', error);
				alert('Çalışma saatleri güncellenirken hata oluştu: ' + error.message);
			}
		}

		// Add form event listener
		document.getElementById('availabilityForm').addEventListener('submit', handleAvailabilitySubmit);

		// Initialize time pickers for time-off modal
		function initializeTimeOffTimePickers() {
			const startTimeInput = document.getElementById('timeoff-start-time');
			const endTimeInput = document.getElementById('timeoff-end-time');

			// Initialize Flatpickr for start time
			const startTimePicker = flatpickr(startTimeInput, {
				enableTime: true,
				noCalendar: true,
				dateFormat: "H:i",
				time_24hr: true,
				defaultHour: 9,
				defaultMinute: 0,
				minuteIncrement: 15,
				locale: "tr",
				theme: "dark",
				onChange: function (selectedDates, dateStr) {
					// Update end time minimum when start time changes
					const startTime = dateStr;
					const endTime = endTimeInput.value;

					if (endTime && endTime <= startTime) {
						// Add 1 hour to start time
						const [hours, minutes] = startTime.split(':');
						const newHour = (parseInt(hours) + 1) % 24;
						const newTime = `${newHour.toString().padStart(2, '0')}:${minutes}`;
						endTimePicker.setDate(newTime, true);
					}
				}
			});

			// Initialize Flatpickr for end time
			const endTimePicker = flatpickr(endTimeInput, {
				enableTime: true,
				noCalendar: true,
				dateFormat: "H:i",
				time_24hr: true,
				defaultHour: 17,
				defaultMinute: 0,
				minuteIncrement: 15,
				locale: "tr",
				theme: "dark"
			});

			// Set default values
			startTimePicker.setDate("09:00", true);
			endTimePicker.setDate("17:00", true);
		}

		// Initialize Flatpickr for modern time pickers
		function initializeTimePickers() {
			const timePickerInputs = document.querySelectorAll('.time-picker');

			timePickerInputs.forEach(input => {
				flatpickr(input, {
					enableTime: true,
					noCalendar: true,
					dateFormat: "H:i",
					time_24hr: true,
					defaultHour: input.dataset.default ? parseInt(input.dataset.default.split(':')[0]) : 9,
					defaultMinute: input.dataset.default ? parseInt(input.dataset.default.split(':')[1]) : 0,
					minuteIncrement: 15,
					locale: "tr",
					theme: "dark"
				});
			});
		}

		// Initialize toggle switches and time selectors
		function initializeDayCards() {
			const dayCards = document.querySelectorAll('.day-card');

			dayCards.forEach(card => {
				const toggle = card.querySelector('.switch input[type="checkbox"]');
				const timeSelector = card.querySelector('.time-selector');
				const dayStatusSpan = card.querySelector('.day-status');

				// Set initial state based on checkbox
				updateDayCardState(card, toggle, timeSelector, dayStatusSpan);

				// Handle toggle changes
				toggle.addEventListener('change', function () {
					updateDayCardState(card, toggle, timeSelector, dayStatusSpan);
				});
			});
		}

		function updateDayCardState(card, toggle, timeSelector, dayStatusSpan) {
			if (toggle.checked) {
				card.classList.add('active');
				timeSelector.classList.remove('hidden');
				dayStatusSpan.textContent = 'Açık';
			} else {
				card.classList.remove('active');
				timeSelector.classList.add('hidden');
				dayStatusSpan.textContent = 'Kapalı';
			}
		}

		// Legacy function for HTML onclick handlers
		function toggleDayCard(dayName) {
			const dayCard = document.querySelector(`[data-day="${dayName}"]`);
			const toggle = document.getElementById(`${dayName}-enabled`);
			const timeSelector = dayCard?.querySelector('.time-selector');
			const dayStatusSpan = dayCard?.querySelector('.day-status');

			if (dayCard && toggle && timeSelector && dayStatusSpan) {
				updateDayCardState(dayCard, toggle, timeSelector, dayStatusSpan);
			}
		}

		// Calendar Filter Functions
		let filterCurrentDate = new Date();
		let selectedFilterDate = null;
		let allAppointments = [];

		function initializeCalendarFilter() {
			const today = new Date();
			filterCurrentDate = new Date(today.getFullYear(), today.getMonth(), 1);
			selectedFilterDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());
			renderFilterCalendar();
			updateSelectedDateInfo();
		}

		function renderFilterCalendar() {
			const calendarDays = document.getElementById('filterCalendarDays');
			const calendarTitle = document.getElementById('filterCalendarTitle');

			const months = [
				'Ocak', 'Şubat', 'Mart', 'Nisan', 'Mayıs', 'Haziran',
				'Temmuz', 'Ağustos', 'Eylül', 'Ekim', 'Kasım', 'Aralık'
			];

			calendarTitle.textContent = `${months[filterCurrentDate.getMonth()]} ${filterCurrentDate.getFullYear()}`;

			const firstDay = new Date(filterCurrentDate.getFullYear(), filterCurrentDate.getMonth(), 1);
			const lastDay = new Date(filterCurrentDate.getFullYear(), filterCurrentDate.getMonth() + 1, 0);

			// Monday as first day (0 = Sunday, 1 = Monday)
			let startDay = firstDay.getDay();
			startDay = startDay === 0 ? 6 : startDay - 1;

			const today = new Date();
			const currentMonth = filterCurrentDate.getMonth();
			const currentYear = filterCurrentDate.getFullYear();

			calendarDays.innerHTML = '';

			// Previous month days
			const prevMonth = new Date(currentYear, currentMonth, 0);
			for (let i = startDay - 1; i >= 0; i--) {
				const dayNum = prevMonth.getDate() - i;
				const dayElement = createFilterDayElement(dayNum, 'other-month', currentYear, currentMonth - 1);
				calendarDays.appendChild(dayElement);
			}

			// Current month days
			for (let day = 1; day <= lastDay.getDate(); day++) {
				const dayDate = new Date(currentYear, currentMonth, day);
				let classes = '';

				// Check if it's today
				if (dayDate.toDateString() === today.toDateString()) {
					classes += ' today';
				}

				// Check if it's selected
				if (selectedFilterDate && dayDate.toDateString() === selectedFilterDate.toDateString()) {
					classes += ' selected';
				}

				// Check if has appointments
				if (hasAppointmentsOnDate(dayDate)) {
					classes += ' has-appointments';
				}

				const dayElement = createFilterDayElement(day, classes, currentYear, currentMonth);
				calendarDays.appendChild(dayElement);
			}

			// Next month days
			const totalCells = calendarDays.children.length;
			const remainingCells = 42 - totalCells; // 6 weeks * 7 days
			for (let day = 1; day <= remainingCells; day++) {
				const dayElement = createFilterDayElement(day, 'other-month', currentYear, currentMonth + 1);
				calendarDays.appendChild(dayElement);
			}
		}

		function createFilterDayElement(day, classes, year, month) {
			const dayElement = document.createElement('div');
			dayElement.className = `calendar-day-mini ${classes}`;
			dayElement.textContent = day;

			if (!classes.includes('other-month')) {
				dayElement.onclick = () => selectFilterDate(year, month, day);
			}

			return dayElement;
		}

		function hasAppointmentsOnDate(date) {
			return allAppointments.some(appointment => {
				const appointmentDate = new Date(appointment.startTime);
				return appointmentDate.toDateString() === date.toDateString();
			});
		}

		function selectFilterDate(year, month, day) {
			selectedFilterDate = new Date(year, month, day);
			renderFilterCalendar();
			updateSelectedDateInfo();

			// Open modal with day's appointments
			openDayAppointmentsModal(selectedFilterDate);
		}

		function previousMonthFilter() {
			filterCurrentDate.setMonth(filterCurrentDate.getMonth() - 1);
			renderFilterCalendar();
		}

		function nextMonthFilter() {
			filterCurrentDate.setMonth(filterCurrentDate.getMonth() + 1);
			renderFilterCalendar();
		}

		function filterAppointmentsByDate() {
			if (!selectedFilterDate) {
				renderAppointments(allAppointments);
				return;
			}

			const filteredAppointments = allAppointments.filter(appointment => {
				const appointmentDate = new Date(appointment.startTime);
				return appointmentDate.toDateString() === selectedFilterDate.toDateString();
			});

			renderAppointments(filteredAppointments);
		}

		function updateSelectedDateInfo() {
			const selectedDateInfo = document.getElementById('selectedDateInfo');
			if (selectedFilterDate) {
				const options = {
					weekday: 'long',
					year: 'numeric',
					month: 'long',
					day: 'numeric'
				};
				selectedDateInfo.textContent = `${selectedFilterDate.toLocaleDateString('tr-TR', options)} randevuları gösteriliyor`;
			} else {
				selectedDateInfo.textContent = 'Tüm randevular gösteriliyor';
			}
		}

		// Appointments Summary Functions
		function renderAppointmentsSummary(appointments) {
			const totalAppointments = document.getElementById('totalAppointments');
			const todayAppointments = document.getElementById('todayAppointments');
			const thisWeekAppointments = document.getElementById('thisWeekAppointments');

			const today = new Date();
			today.setHours(0, 0, 0, 0);

			const startOfWeek = new Date(today);
			startOfWeek.setDate(today.getDate() - today.getDay() + 1); // Monday

			const endOfWeek = new Date(startOfWeek);
			endOfWeek.setDate(startOfWeek.getDate() + 6); // Sunday

			const todayCount = appointments.filter(appointment => {
				const appointmentDate = new Date(appointment.startTime);
				appointmentDate.setHours(0, 0, 0, 0);
				return appointmentDate.getTime() === today.getTime();
			}).length;

			const weekCount = appointments.filter(appointment => {
				const appointmentDate = new Date(appointment.startTime);
				return appointmentDate >= startOfWeek && appointmentDate <= endOfWeek;
			}).length;

			totalAppointments.textContent = appointments.length;
			todayAppointments.textContent = todayCount;
			thisWeekAppointments.textContent = weekCount;
		}

		// Day Appointments Modal Functions
		function openDayAppointmentsModal(date) {
			const modal = document.getElementById('dayAppointmentsModal');
			const modalTitle = document.getElementById('modalDateTitle');
			const dayAppointmentsList = document.getElementById('dayAppointmentsList');
			const noDayAppointments = document.getElementById('noDayAppointments');

			// Set modal title
			const options = {
				weekday: 'long',
				year: 'numeric',
				month: 'long',
				day: 'numeric'
			};
			modalTitle.textContent = date.toLocaleDateString('tr-TR', options);

			// Filter appointments for selected date
			const dayAppointments = allAppointments.filter(appointment => {
				const appointmentDate = new Date(appointment.startTime);
				return appointmentDate.toDateString() === date.toDateString();
			});

			// Render appointments
			if (dayAppointments.length > 0) {
				dayAppointmentsList.style.display = 'block';
				noDayAppointments.style.display = 'none';
				renderDayAppointments(dayAppointments);
			} else {
				dayAppointmentsList.style.display = 'none';
				noDayAppointments.style.display = 'block';
			}

			// Show modal
			modal.style.display = 'block';
		}

		function renderDayAppointments(appointments) {
			const dayAppointmentsList = document.getElementById('dayAppointmentsList');
			dayAppointmentsList.innerHTML = '';

			// Sort appointments by time
			appointments.sort((a, b) => new Date(a.startTime) - new Date(b.startTime));

			appointments.forEach(appointment => {
				console.log('Appointment data:', appointment); // Debug log

				const rawStart = appointment.startTime;
				const dateObj = new Date(rawStart);
				const formattedTime = dateObj.toLocaleTimeString('tr-TR', {
					hour: '2-digit',
					minute: '2-digit'
				});

				// Customer info - backend'den customer olarak geliyor
				let customerName = 'Müşteri Bilgisi Bulunamadı';
				let customerInfo = 'Bilinmeyen';

				// Kayıtlı müşteri kontrolü (customer field populate edilmiş)
				if (appointment.customer && appointment.customer.name && appointment.customer.surname) {
					customerName = `${appointment.customer.name} ${appointment.customer.surname}`;
					customerInfo = `Kayıtlı Müşteri`;
				}
				// user field varsa da kontrol et (alternatif)
				else if (appointment.user && appointment.user.name && appointment.user.surname) {
					customerName = `${appointment.user.name} ${appointment.user.surname}`;
					customerInfo = `Kayıtlı Müşteri`;
				}
				// Misafir müşteri kontrolü
				else if (appointment.guestName && appointment.guestSurname) {
					customerName = `${appointment.guestName} ${appointment.guestSurname}`;
					customerInfo = `Misafir`;
				}
				// Phone number fallback
				else if (appointment.customer && appointment.customer.phoneNumber) {
					customerName = appointment.customer.phoneNumber;
					customerInfo = 'Kayıtlı Müşteri';
				}
				else if (appointment.guestPhoneNumber) {
					customerName = appointment.guestPhoneNumber;
					customerInfo = 'Misafir';
				}

				// Service info - backend'den service olarak populate edilmiş
				let serviceName = 'Hizmet Bilgisi Yok';
				let serviceDuration = 'Bilinmiyor';

				if (appointment.service && appointment.service.name) {
					serviceName = appointment.service.name;
					serviceDuration = appointment.service.duration ? `${appointment.service.duration} dakika` : 'Bilinmiyor';
				}

				// Randevunun geçmiş olup olmadığını kontrol et
				const now = new Date();
				const isPastAppointment = dateObj < now;
				const appointmentClass = isPastAppointment ? 'day-appointment-item past-appointment' : 'day-appointment-item';
				const statusText = isPastAppointment ? 'Tamamlandı' : 'Planlandı';
				const cancelButtonHtml = isPastAppointment ? 
					'<div class="past-appointment-badge">Geçmiş Randevu</div>' : 
					`<button class="day-cancel-btn" onclick="cancelAppointment('${appointment._id}')" id="day-cancel-${appointment._id}">Randevuyu İptal Et</button>`;

				const appointmentElement = document.createElement('div');
				appointmentElement.className = appointmentClass;
				appointmentElement.innerHTML = `
					<div class="day-appointment-header">
						<div class="day-customer-name">${customerName}</div>
						<div class="day-appointment-time">${formattedTime}</div>
					</div>
					<div class="day-appointment-details">
						<div class="day-detail-item">
							<div class="day-detail-label">Müşteri Tipi:</div>
							<div class="day-detail-value">${customerInfo}</div>
						</div>
						<div class="day-detail-item">
							<div class="day-detail-label">Hizmet:</div>
							<div class="day-detail-value day-service-name">${serviceName}</div>
						</div>
						<div class="day-detail-item">
							<div class="day-detail-label">Süre:</div>
							<div class="day-detail-value">${serviceDuration}</div>
						</div>
						<div class="day-detail-item">
							<div class="day-detail-label">Durum:</div>
							<div class="day-detail-value">${statusText}</div>
						</div>
					</div>
					${cancelButtonHtml}
				`;

				dayAppointmentsList.appendChild(appointmentElement);
			});
		}

		function closeDayAppointmentsModal() {
			const modal = document.getElementById('dayAppointmentsModal');
			modal.style.display = 'none';
		}

		// Update modal click outside handler
		window.onclick = function (event) {
			const addModal = document.getElementById('addServiceModal');
			const editModal = document.getElementById('editServiceModal');
			const addTimeOffModal = document.getElementById('addTimeOffModal');
			const dayModal = document.getElementById('dayAppointmentsModal');

			if (event.target === addModal) {
				hideAddServiceModal();
			}
			if (event.target === editModal) {
				hideEditServiceModal();
			}
			if (event.target === addTimeOffModal) {
				hideAddTimeOffModal();
			}
			if (event.target === dayModal) {
				closeDayAppointmentsModal();
			}
		}

		// Initialize everything when DOM is ready
		setTimeout(() => {
			initializeTimePickers();
			initializeDayCards();
		}, 500);
	</script>

	<%- include('partials/footer')%>