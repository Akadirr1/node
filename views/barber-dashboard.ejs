<%- include('partials/header')%>

	<div class="dashboard-container">
		<div class="container-fluid">
			<div class="dashboard-header">
				<h1 class="dashboard-title">Berber YÃ¶netim Paneli</h1>
				<div class="welcome-message">
					<span id="welcomeMessage">HoÅŸ geldiniz!</span>
				</div>
			</div>

			<!-- Appointments Section -->
			<div class="appointments-section">
				<h2 class="section-title">YaklaÅŸan RandevularÄ±m</h2>

				<!-- Loading Spinner -->
				<div id="appointmentsLoading" class="text-center">
					<div class="spinner-border" role="status">
						<span class="sr-only">YÃ¼kleniyor...</span>
					</div>
				</div>

				<!-- Error Message -->
				<div id="appointmentsError" class="error-message" style="display: none;"></div>

				<!-- Appointments List -->
				<div id="appointmentsList" class="appointments-list" style="display: none;">
					<!-- Appointments will be inserted here -->
				</div>

				<!-- No Appointments Message -->
				<div id="noAppointments" class="no-appointments" style="display: none;">
					<p>HenÃ¼z randevunuz bulunmamaktadÄ±r.</p>
				</div>
			</div>

			<!-- Services Section -->
			<div class="services-section">
				<div class="services-header">
					<h2 class="section-title">Aktif Hizmetlerim</h2>
					<button class="add-service-btn" onclick="showAddServiceModal()">Hizmet Ekle</button>
				</div>

				<!-- Loading Spinner for Services -->
				<div id="servicesLoading" class="text-center">
					<div class="spinner-border" role="status">
						<span class="sr-only">YÃ¼kleniyor...</span>
					</div>
				</div>

				<!-- Error Message for Services -->
				<div id="servicesError" class="error-message" style="display: none;"></div>

				<!-- Services List -->
				<div id="servicesList" class="services-list" style="display: none;">
					<!-- Services will be inserted here -->
				</div>

				<!-- No Services Message -->
				<div id="noServices" class="no-services" style="display: none;">
					<p>HenÃ¼z aktif hizmetiniz bulunmamaktadÄ±r.</p>
				</div>
			</div>

			<!-- Availability Section -->
			<div class="availability-section">
				<div class="availability-header">
					<h2 class="section-title">Ã‡alÄ±ÅŸma Saatlerini DÃ¼zenle</h2>
				</div>

				<div class="availability-form-container">
					<form id="availabilityForm">
						<div class="days-grid">
							<div class="day-card" data-day="monday">
								<div class="day-header">
									<div class="day-info">
										<h3>Pazartesi</h3>
										<span class="day-status">KapalÄ±</span>
									</div>
									<label class="switch">
										<input type="checkbox" id="monday-enabled" onchange="toggleDayCard('monday')">
										<span class="slider"></span>
									</label>
								</div>
								<div class="time-selector hidden">
									<div class="time-group">
										<label>BaÅŸlangÄ±Ã§ Saati</label>
										<input type="text" id="monday-start" class="time-picker"
											placeholder="Saat seÃ§in">
									</div>
									<div class="time-group">
										<label>BitiÅŸ Saati</label>
										<input type="text" id="monday-end" class="time-picker" placeholder="Saat seÃ§in">
									</div>
								</div>
							</div>

							<div class="day-card" data-day="tuesday">
								<div class="day-header">
									<div class="day-info">
										<h3>SalÄ±</h3>
										<span class="day-status">KapalÄ±</span>
									</div>
									<label class="switch">
										<input type="checkbox" id="tuesday-enabled" onchange="toggleDayCard('tuesday')">
										<span class="slider"></span>
									</label>
								</div>
								<div class="time-selector hidden">
									<div class="time-group">
										<label>BaÅŸlangÄ±Ã§ Saati</label>
										<input type="text" id="tuesday-start" class="time-picker"
											placeholder="Saat seÃ§in">
									</div>
									<div class="time-group">
										<label>BitiÅŸ Saati</label>
										<input type="text" id="tuesday-end" class="time-picker"
											placeholder="Saat seÃ§in">
									</div>
								</div>
							</div>

							<div class="day-card" data-day="wednesday">
								<div class="day-header">
									<div class="day-info">
										<h3>Ã‡arÅŸamba</h3>
										<span class="day-status">KapalÄ±</span>
									</div>
									<label class="switch">
										<input type="checkbox" id="wednesday-enabled"
											onchange="toggleDayCard('wednesday')">
										<span class="slider"></span>
									</label>
								</div>
								<div class="time-selector hidden">
									<div class="time-group">
										<label>BaÅŸlangÄ±Ã§ Saati</label>
										<input type="text" id="wednesday-start" class="time-picker"
											placeholder="Saat seÃ§in">
									</div>
									<div class="time-group">
										<label>BitiÅŸ Saati</label>
										<input type="text" id="wednesday-end" class="time-picker"
											placeholder="Saat seÃ§in">
									</div>
								</div>
							</div>

							<div class="day-card" data-day="thursday">
								<div class="day-header">
									<div class="day-info">
										<h3>PerÅŸembe</h3>
										<span class="day-status">KapalÄ±</span>
									</div>
									<label class="switch">
										<input type="checkbox" id="thursday-enabled"
											onchange="toggleDayCard('thursday')">
										<span class="slider"></span>
									</label>
								</div>
								<div class="time-selector hidden">
									<div class="time-group">
										<label>BaÅŸlangÄ±Ã§ Saati</label>
										<input type="text" id="thursday-start" class="time-picker"
											placeholder="Saat seÃ§in">
									</div>
									<div class="time-group">
										<label>BitiÅŸ Saati</label>
										<input type="text" id="thursday-end" class="time-picker"
											placeholder="Saat seÃ§in">
									</div>
								</div>
							</div>

							<div class="day-card" data-day="friday">
								<div class="day-header">
									<div class="day-info">
										<h3>Cuma</h3>
										<span class="day-status">KapalÄ±</span>
									</div>
									<label class="switch">
										<input type="checkbox" id="friday-enabled" onchange="toggleDayCard('friday')">
										<span class="slider"></span>
									</label>
								</div>
								<div class="time-selector hidden">
									<div class="time-group">
										<label>BaÅŸlangÄ±Ã§ Saati</label>
										<input type="text" id="friday-start" class="time-picker"
											placeholder="Saat seÃ§in">
									</div>
									<div class="time-group">
										<label>BitiÅŸ Saati</label>
										<input type="text" id="friday-end" class="time-picker" placeholder="Saat seÃ§in">
									</div>
								</div>
							</div>

							<div class="day-card" data-day="saturday">
								<div class="day-header">
									<div class="day-info">
										<h3>Cumartesi</h3>
										<span class="day-status">KapalÄ±</span>
									</div>
									<label class="switch">
										<input type="checkbox" id="saturday-enabled"
											onchange="toggleDayCard('saturday')">
										<span class="slider"></span>
									</label>
								</div>
								<div class="time-selector hidden">
									<div class="time-group">
										<label>BaÅŸlangÄ±Ã§ Saati</label>
										<input type="text" id="saturday-start" class="time-picker"
											placeholder="Saat seÃ§in">
									</div>
									<div class="time-group">
										<label>BitiÅŸ Saati</label>
										<input type="text" id="saturday-end" class="time-picker"
											placeholder="Saat seÃ§in">
									</div>
								</div>
							</div>

							<div class="day-card" data-day="sunday">
								<div class="day-header">
									<div class="day-info">
										<h3>Pazar</h3>
										<span class="day-status">KapalÄ±</span>
									</div>
									<label class="switch">
										<input type="checkbox" id="sunday-enabled" onchange="toggleDayCard('sunday')">
										<span class="slider"></span>
									</label>
								</div>
								<div class="time-selector hidden">
									<div class="time-group">
										<label>BaÅŸlangÄ±Ã§ Saati</label>
										<input type="text" id="sunday-start" class="time-picker"
											placeholder="Saat seÃ§in">
									</div>
									<div class="time-group">
										<label>BitiÅŸ Saati</label>
										<input type="text" id="sunday-end" class="time-picker" placeholder="Saat seÃ§in">
									</div>
								</div>
							</div>
						</div>

						<div class="form-actions-modern">
							<button type="submit" class="save-btn-modern">
								<span class="btn-icon">ðŸ’¾</span>
								Ã‡alÄ±ÅŸma Saatlerini Kaydet
							</button>
						</div>
					</form>
				</div>
			</div>

			<!-- Add Service Modal -->
			<div id="addServiceModal" class="modal" style="display: none;">
				<div class="modal-content">
					<div class="modal-header">
						<h3>Yeni Hizmet Ekle</h3>
						<span class="close" onclick="hideAddServiceModal()">&times;</span>
					</div>
					<div class="modal-body">
						<form id="addServiceForm">
							<div class="form-group">
								<label for="serviceSelect">Hizmet SeÃ§in:</label>
								<select id="serviceSelect" required>
									<option value="">Hizmet seÃ§iniz...</option>
									<!-- Options will be loaded dynamically -->
								</select>
							</div>
							<div class="form-group">
								<label for="servicePrice">Fiyat (â‚º):</label>
								<input type="number" id="servicePrice" min="0" step="0.01" required>
							</div>
							<div class="form-group">
								<label for="serviceDuration">SÃ¼re (dakika):</label>
								<input type="number" id="serviceDuration" min="1" step="1" required>
							</div>
							<div class="form-actions">
								<button type="button" class="cancel-btn-modal"
									onclick="hideAddServiceModal()">Ä°ptal</button>
								<button type="submit" class="save-btn">Hizmeti Ekle</button>
							</div>
						</form>
					</div>
				</div>
			</div>

			<!-- Edit Service Modal -->
			<div id="editServiceModal" class="modal" style="display: none;">
				<div class="modal-content">
					<div class="modal-header">
						<h3>Hizmet DÃ¼zenle</h3>
						<span class="close" onclick="hideEditServiceModal()">&times;</span>
					</div>
					<div class="modal-body">
						<form id="editServiceForm">
							<div class="form-group">
								<label for="editServiceName">Hizmet AdÄ±:</label>
								<input type="text" id="editServiceName" readonly style="background: #333; color: #aaa;">
							</div>
							<div class="form-group">
								<label for="editServicePrice">Fiyat (â‚º):</label>
								<input type="number" id="editServicePrice" min="0" step="0.01" required>
							</div>
							<div class="form-group">
								<label for="editServiceDuration">SÃ¼re (dakika):</label>
								<input type="number" id="editServiceDuration" min="1" step="1" required>
							</div>
							<div class="form-actions">
								<button type="button" class="cancel-btn-modal"
									onclick="hideEditServiceModal()">Ä°ptal</button>
								<button type="submit" class="save-btn">GÃ¼ncelle</button>
							</div>
						</form>
					</div>
				</div>
			</div>

		</div>
	</div>

	<style>
		.dashboard-container {
			background-color: #1a1a1a;
			min-height: 100vh;
			padding: 60px 0;
		}

		.dashboard-header {
			display: flex;
			justify-content: space-between;
			align-items: center;
			margin-bottom: 40px;
			padding: 0 40px;
		}

		.dashboard-title {
			color: #8bc34a;
			font-size: 36px;
			font-weight: 600;
			margin: 0;
		}

		.welcome-message {
			color: #ffffff;
			font-size: 18px;
		}

		.appointments-section {
			padding: 0 40px;
		}

		.services-section {
			padding: 0 40px;
			margin-top: 50px;
		}

		.services-header {
			display: flex;
			justify-content: space-between;
			align-items: center;
			margin-bottom: 30px;
		}

		.add-service-btn {
			background: #8bc34a;
			color: #000000;
			border: none;
			padding: 12px 24px;
			border-radius: 8px;
			font-size: 16px;
			font-weight: 600;
			cursor: pointer;
			transition: background-color 0.3s ease;
		}

		.add-service-btn:hover {
			background: #7cb342;
		}

		/* Modal Styles */
		.modal {
			position: fixed;
			z-index: 1000;
			left: 0;
			top: 0;
			width: 100%;
			height: 100%;
			background-color: rgba(0, 0, 0, 0.8);
			display: flex;
			justify-content: center;
			align-items: center;
		}

		.modal-content {
			background: #2d2d2d;
			border-radius: 12px;
			width: 90%;
			max-width: 500px;
			border: 1px solid #4a4a4a;
		}

		.modal-header {
			display: flex;
			justify-content: space-between;
			align-items: center;
			padding: 20px 25px;
			border-bottom: 1px solid #4a4a4a;
		}

		.modal-header h3 {
			color: #8bc34a;
			margin: 0;
			font-size: 20px;
		}

		.close {
			color: #ffffff;
			font-size: 28px;
			font-weight: bold;
			cursor: pointer;
			line-height: 1;
		}

		.close:hover {
			color: #8bc34a;
		}

		.modal-body {
			padding: 25px;
		}

		.form-group {
			margin-bottom: 20px;
		}

		.form-group label {
			display: block;
			color: #ffffff;
			font-weight: 600;
			margin-bottom: 8px;
		}

		.form-group input,
		.form-group select {
			width: 100%;
			padding: 12px;
			border: 1px solid #4a4a4a;
			border-radius: 6px;
			background: #1a1a1a;
			color: #ffffff;
			font-size: 16px;
		}

		.form-group input:focus,
		.form-group select:focus {
			outline: none;
			border-color: #8bc34a;
		}

		.form-actions {
			display: flex;
			gap: 15px;
			justify-content: flex-end;
			margin-top: 30px;
		}

		.cancel-btn-modal {
			background: #666;
			color: white;
			border: none;
			padding: 12px 24px;
			border-radius: 6px;
			font-size: 16px;
			cursor: pointer;
			transition: background-color 0.3s ease;
		}

		.cancel-btn-modal:hover {
			background: #555;
		}

		.save-btn {
			background: #8bc34a;
			color: #000000;
			border: none;
			padding: 12px 24px;
			border-radius: 6px;
			font-size: 16px;
			font-weight: 600;
			cursor: pointer;
			transition: background-color 0.3s ease;
		}

		.save-btn:hover {
			background: #7cb342;
		}

		.save-btn:disabled {
			background: #666;
			cursor: not-allowed;
		}

		.services-list {
			display: grid;
			grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
			gap: 20px;
		}

		.service-card {
			background: #2d2d2d;
			border-radius: 12px;
			padding: 20px;
			border: 1px solid #4a4a4a;
			transition: transform 0.3s ease, box-shadow 0.3s ease;
			position: relative;
		}

		.service-card:hover {
			transform: translateY(-2px);
			box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
			border-color: #8bc34a;
		}

		.edit-indicator {
			position: absolute;
			bottom: 10px;
			right: 15px;
			color: #8bc34a;
			font-size: 12px;
			opacity: 0;
			transition: opacity 0.3s ease;
		}

		.service-card:hover .edit-indicator {
			opacity: 1;
		}

		.service-header {
			display: flex;
			justify-content: space-between;
			align-items: center;
			margin-bottom: 15px;
		}

		.service-title {
			color: #8bc34a;
			font-size: 18px;
			font-weight: 600;
		}

		.service-price {
			color: #ffffff;
			font-size: 16px;
			font-weight: 500;
		}

		.service-info {
			display: flex;
			justify-content: space-between;
			align-items: center;
			color: #b0b0b0;
			font-size: 14px;
			margin-bottom: 15px;
		}

		.service-actions {
			display: flex;
			justify-content: space-between;
			align-items: center;
			padding-top: 15px;
			border-top: 1px solid #4a4a4a;
		}

		.edit-btn {
			background: #8bc34a;
			color: #000000;
			border: none;
			padding: 8px 12px;
			border-radius: 6px;
			font-size: 14px;
			cursor: pointer;
			transition: background-color 0.3s ease;
			display: flex;
			align-items: center;
			gap: 5px;
		}

		.edit-btn:hover {
			background: #7cb342;
		}

		/* Toggle Switch - Yeniden YazÄ±ldÄ± */
		.toggle-switch-card {
			position: relative;
			display: inline-block;
		}

		.toggle-switch-card input[type="checkbox"] {
			opacity: 0;
			width: 44px;
			height: 24px;
			position: absolute;
			cursor: pointer;
			z-index: 1;
		}

		.toggle-slider {
			position: relative;
			display: inline-block;
			width: 44px;
			height: 24px;
			background-color: #666;
			border-radius: 24px;
			cursor: pointer;
			transition: background-color 0.3s;
		}

		.toggle-slider:before {
			position: absolute;
			content: "";
			height: 18px;
			width: 18px;
			left: 3px;
			top: 3px;
			background-color: white;
			border-radius: 50%;
			transition: transform 0.3s;
			box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
		}

		.toggle-switch-card input:checked+.toggle-slider {
			background-color: #8bc34a;
		}

		.toggle-switch-card input:checked+.toggle-slider:before {
			transform: translateX(20px);
		}

		.toggle-slider:hover {
			background-color: #555;
		}

		.toggle-switch-card input:checked+.toggle-slider:hover {
			background-color: #7cb342;
		}

		.service-duration {
			color: #8bc34a;
		}

		.service-status {
			padding: 4px 8px;
			border-radius: 4px;
			font-size: 12px;
			font-weight: 500;
			color: white;
		}

		.service-status.active {
			background: #28a745;
		}

		.service-status.inactive {
			background: #dc3545;
		}

		.no-services {
			text-align: center;
			padding: 60px 20px;
			color: #b0b0b0;
			font-size: 18px;
		}

		.section-title {
			color: #ffffff;
			font-size: 24px;
			font-weight: 600;
			margin-bottom: 30px;
		}

		.appointments-list {
			display: flex;
			flex-direction: column;
			gap: 20px;
		}

		.appointment-card {
			background: #2d2d2d;
			border-radius: 12px;
			padding: 25px;
			border: 1px solid #4a4a4a;
			transition: transform 0.3s ease, box-shadow 0.3s ease;
		}

		.appointment-card:hover {
			transform: translateY(-2px);
			box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
		}

		.appointment-header {
			display: flex;
			justify-content: space-between;
			align-items: center;
			margin-bottom: 15px;
		}

		.customer-name {
			color: #8bc34a;
			font-size: 20px;
			font-weight: 600;
		}

		.appointment-time {
			color: #ffffff;
			font-size: 16px;
			font-weight: 500;
		}

		.appointment-details {
			display: grid;
			grid-template-columns: 1fr 1fr 1fr;
			gap: 20px;
			margin-top: 15px;
		}

		.detail-item {
			color: #b0b0b0;
		}

		.detail-label {
			font-weight: 600;
			color: #ffffff;
			margin-bottom: 5px;
		}

		.service-name {
			color: #8bc34a;
			font-weight: 600;
		}

		.cancel-btn {
			background: #ff4444;
			color: white;
			border: none;
			padding: 8px 16px;
			border-radius: 6px;
			font-size: 14px;
			font-weight: 500;
			cursor: pointer;
			transition: background-color 0.3s ease;
			margin-top: 15px;
		}

		.cancel-btn:hover {
			background: #ff3333;
		}

		.cancel-btn:disabled {
			background: #666;
			cursor: not-allowed;
		}

		.error-message {
			background: #ff4444;
			color: white;
			padding: 15px;
			border-radius: 8px;
			text-align: center;
			margin: 20px 0;
		}

		.no-appointments {
			text-align: center;
			padding: 60px 20px;
			color: #b0b0b0;
			font-size: 18px;
		}

		.spinner-border {
			color: #8bc34a;
		}

		/* Modern Availability Styles */
		.availability-section {
			padding: 0 40px;
			margin-top: 50px;
		}

		.availability-header {
			display: flex;
			justify-content: space-between;
			align-items: center;
			margin-bottom: 30px;
			flex-wrap: wrap;
			gap: 20px;
		}

		.availability-form-container {
			background: linear-gradient(135deg, #2d2d2d 0%, #1a1a1a 100%);
			border-radius: 16px;
			padding: 30px;
			border: 1px solid #4a4a4a;
			box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
		}

		.days-grid {
			display: grid;
			grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
			gap: 20px;
			margin-bottom: 30px;
		}

		.day-card {
			background: linear-gradient(135deg, #3a3a3a 0%, #2a2a2a 100%);
			border-radius: 12px;
			padding: 20px;
			border: 2px solid #555;
			transition: all 0.3s ease;
			position: relative;
			overflow: hidden;
		}

		.day-card::before {
			content: '';
			position: absolute;
			top: 0;
			left: 0;
			right: 0;
			height: 3px;
			background: linear-gradient(90deg, #666, #555);
			transition: all 0.3s ease;
		}

		.day-card.active {
			border-color: #8bc34a;
			background: linear-gradient(135deg, #3d4a2a 0%, #2d3a1a 100%);
		}

		.day-card.active::before {
			background: linear-gradient(90deg, #8bc34a, #7cb342);
		}

		.day-header {
			display: flex;
			justify-content: space-between;
			align-items: center;
			margin-bottom: 15px;
		}

		.day-info h3 {
			color: #fff;
			margin: 0;
			font-size: 18px;
			font-weight: 600;
		}

		.day-status {
			font-size: 12px;
			padding: 4px 8px;
			border-radius: 12px;
			background: #666;
			color: #fff;
			margin-top: 4px;
			display: inline-block;
		}

		.day-card.active .day-status {
			background: #8bc34a;
			color: #000;
		}

		/* Modern Switch */
		.switch {
			position: relative;
			display: inline-block;
			width: 50px;
			height: 26px;
		}

		.switch input {
			opacity: 0;
			width: 0;
			height: 0;
		}

		.slider {
			position: absolute;
			cursor: pointer;
			top: 0;
			left: 0;
			right: 0;
			bottom: 0;
			background: linear-gradient(135deg, #666, #555);
			transition: all 0.3s ease;
			border-radius: 26px;
			box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.3);
		}

		.slider:before {
			position: absolute;
			content: "";
			height: 20px;
			width: 20px;
			left: 3px;
			top: 3px;
			background: linear-gradient(135deg, #fff, #f0f0f0);
			transition: all 0.3s ease;
			border-radius: 50%;
			box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
		}

		.switch input:checked+.slider {
			background: linear-gradient(135deg, #8bc34a, #7cb342);
			box-shadow: 0 0 20px rgba(139, 195, 74, 0.4);
		}

		.switch input:checked+.slider:before {
			transform: translateX(24px);
		}

		.time-selector {
			transition: all 0.4s ease;
			max-height: 0;
			overflow: hidden;
			opacity: 0;
		}

		.day-card.active .time-selector {
			max-height: 300px;
			opacity: 1;
		}

		.time-selector.hidden {
			display: none;
		}

		.day-card.active .time-selector.hidden {
			display: block;
		}

		.time-group {
			margin-bottom: 15px;
		}

		.time-group label {
			display: block;
			color: #8bc34a;
			font-weight: 600;
			margin-bottom: 8px;
			font-size: 14px;
		}

		.time-picker {
			width: 100%;
			background: linear-gradient(135deg, #1a1a1a, #2a2a2a);
			border: 2px solid #555;
			color: #fff;
			padding: 12px 15px;
			border-radius: 10px;
			font-size: 16px;
			transition: all 0.3s ease;
			cursor: pointer;
		}

		.time-picker:focus {
			outline: none;
			border-color: #8bc34a;
			box-shadow: 0 0 0 3px rgba(139, 195, 74, 0.2);
		}

		.form-actions-modern {
			text-align: center;
			margin-top: 30px;
		}

		.save-btn-modern {
			background: linear-gradient(135deg, #8bc34a, #7cb342);
			color: #000;
			border: none;
			padding: 15px 40px;
			border-radius: 12px;
			font-size: 16px;
			font-weight: 700;
			cursor: pointer;
			transition: all 0.3s ease;
			display: inline-flex;
			align-items: center;
			gap: 10px;
			box-shadow: 0 4px 15px rgba(139, 195, 74, 0.3);
		}

		.save-btn-modern:hover {
			transform: translateY(-2px);
			box-shadow: 0 8px 25px rgba(139, 195, 74, 0.4);
		}

		.btn-icon {
			font-size: 18px;
		}

		/* Flatpickr Dark Theme Customization */
		.flatpickr-calendar {
			background: #2d2d2d !important;
			border: 2px solid #8bc34a !important;
			border-radius: 12px !important;
			box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4) !important;
		}

		.flatpickr-time input {
			background: #1a1a1a !important;
			color: #8bc34a !important;
			border: 1px solid #555 !important;
			font-weight: 600 !important;
		}

		.flatpickr-time input:focus {
			border-color: #8bc34a !important;
		}

		.flatpickr-am-pm {
			background: #8bc34a !important;
			color: #000 !important;
			font-weight: 600 !important;
		}

		/* Responsive design */
		@media (max-width: 768px) {
			.dashboard-header {
				flex-direction: column;
				text-align: center;
				gap: 15px;
				padding: 0 20px;
			}

			.dashboard-title {
				font-size: 28px;
			}

			.appointments-section,
			.services-section,
			.availability-section {
				padding: 0 20px;
			}

			.appointment-details {
				grid-template-columns: 1fr;
				gap: 10px;
			}

			.appointment-card {
				padding: 20px;
			}

			.services-list {
				grid-template-columns: 1fr;
			}

			.services-header {
				flex-direction: column;
				gap: 15px;
				align-items: stretch;
			}

			.modal-content {
				width: 95%;
				margin: 10px;
			}

			.form-actions {
				flex-direction: column;
			}

			.days-grid {
				grid-template-columns: 1fr;
			}

			.modal-content {
				width: 95%;
				margin: 10px;
			}

			.form-actions {
				flex-direction: column;
			}
		}
	</style>
	<script>
		let services = [];
		let myServices = [];

		document.addEventListener('DOMContentLoaded', async function () {
			// Check if user is authenticated and is a barber
			const isAuthenticated = await checkUserAuthentication();
			if (!isAuthenticated) {
				window.location.href = '/login';
				return;
			}

			// Fetch barber's data
			fetchMyAppointments();
			await fetchAllServices();
			fetchMyServices();
			fetchCurrentAvailabilityForEdit();

			// Setup event listeners
			setupEventListeners();
		});

		function setupEventListeners() {
			// Modal click outside to close
			window.onclick = function (event) {
				const addModal = document.getElementById('addServiceModal');
				const editModal = document.getElementById('editServiceModal');

				if (event.target === addModal) {
					hideAddServiceModal();
				}
				if (event.target === editModal) {
					hideEditServiceModal();
				}
			}

			// Add service form submit handler
			const addForm = document.getElementById('addServiceForm');
			if (addForm) {
				addForm.addEventListener('submit', handleAddServiceSubmit);
			}

			// Edit service form submit handler
			const editForm = document.getElementById('editServiceForm');
			if (editForm) {
				editForm.addEventListener('submit', handleEditServiceSubmit);
			}
		}

		async function handleAddServiceSubmit(e) {
			e.preventDefault();

			const serviceId = document.getElementById('serviceSelect').value;
			const price = parseFloat(document.getElementById('servicePrice').value);
			const duration = parseInt(document.getElementById('serviceDuration').value);

			// Validation
			if (!serviceId) {
				alert('LÃ¼tfen bir hizmet seÃ§in');
				return;
			}
			if (!price || price <= 0) {
				alert('LÃ¼tfen geÃ§erli bir fiyat girin');
				return;
			}
			if (!duration || duration <= 0) {
				alert('LÃ¼tfen geÃ§erli bir sÃ¼re girin');
				return;
			}

			// Bu kontrole artÄ±k gerek yok Ã§Ã¼nkÃ¼ dropdown zaten filtrelenmiÅŸ hizmetleri gÃ¶steriyor
			// Ama gÃ¼venlik iÃ§in bÄ±rakabiliriz
			const existingService = myServices.find(s => s.service && s.service._id === serviceId);
			if (existingService) {
				alert('Bu hizmet zaten mevcut');
				return;
			}

			try {
				const response = await fetch('/api/barbers/me/services', {
					method: 'PUT',
					headers: {
						'Content-Type': 'application/json'
					},
					credentials: 'include',
					body: JSON.stringify({
						servicesOffered: [{
							service: serviceId,
							price: price,
							duration: duration,
							isActive: true
						}]
					})
				});

				if (response.ok) {
					hideAddServiceModal();
					await fetchMyServices(); // Refresh services list
					alert('Hizmet baÅŸarÄ±yla eklendi!');
				} else {
					const error = await response.json();
					throw new Error(error.message || 'Hizmet eklenirken hata oluÅŸtu');
				}
			} catch (error) {
				console.error('Error:', error);
				alert('Hizmet eklenirken hata oluÅŸtu: ' + error.message);
			}
		}

		async function checkUserAuthentication() {
			try {
				const response = await fetch('/profile/me', {
					credentials: 'include'
				});

				if (response.ok) {
					const userData = await response.json();
					if (userData.role === 'barber') {
						document.getElementById('welcomeMessage').textContent =
							`HoÅŸ geldiniz, ${userData.name} ${userData.surname}!`;
						return true;
					} else {
						alert('Bu sayfaya eriÅŸim yetkiniz yok. Sadece berberler bu paneli kullanabilir.');
						window.location.href = '/';
						return false;
					}
				}
				return false;
			} catch (error) {
				console.error('Authentication check failed:', error);
				return false;
			}
		}

		async function fetchAllServices() {
			try {
				const response = await fetch('/api/services');
				if (!response.ok) {
					throw new Error('Hizmetler alÄ±namadÄ±');
				}
				services = await response.json();
				populateServiceDropdown();
			} catch (error) {
				console.error('Error fetching services:', error);
			}
		}

		function populateServiceDropdown() {
			const select = document.getElementById('serviceSelect');
			if (select) {
				select.innerHTML = '<option value="">Hizmet seÃ§iniz...</option>';

				// Berberin zaten eklediÄŸi hizmetlerin ID'lerini al
				const addedServiceIds = myServices.map(serviceOffered =>
					serviceOffered.service ? serviceOffered.service._id : null
				).filter(id => id !== null);

				// Sadece henÃ¼z eklenmemiÅŸ hizmetleri gÃ¶ster
				const availableServices = services.filter(service =>
					!addedServiceIds.includes(service._id)
				);

				if (availableServices.length === 0) {
					const option = document.createElement('option');
					option.value = '';
					option.textContent = 'Eklenebilecek hizmet bulunmuyor';
					option.disabled = true;
					select.appendChild(option);
				} else {
					availableServices.forEach(service => {
						const option = document.createElement('option');
						option.value = service._id;
						option.textContent = service.name;
						select.appendChild(option);
					});
				}
			}
		}

		async function fetchMyAppointments() {
			const loading = document.getElementById('appointmentsLoading');
			const errorMessage = document.getElementById('appointmentsError');
			const appointmentsList = document.getElementById('appointmentsList');
			const noAppointments = document.getElementById('noAppointments');

			try {
				const response = await fetch('/api/appointments/my-appointments', {
					credentials: 'include'
				});

				loading.style.display = 'none';

				if (response.ok) {
					const appointments = await response.json();

					if (appointments.length > 0) {
						appointmentsList.style.display = 'block';
						renderAppointments(appointments);
					} else {
						noAppointments.style.display = 'block';
					}
				} else if (response.status === 401) {
					window.location.href = '/login';
				} else {
					errorMessage.textContent = 'Randevular yÃ¼klenirken bir hata oluÅŸtu.';
					errorMessage.style.display = 'block';
				}
			} catch (error) {
				loading.style.display = 'none';
				errorMessage.textContent = 'Randevular yÃ¼klenirken bir hata oluÅŸtu.';
				errorMessage.style.display = 'block';
				console.error('Error fetching appointments:', error);
			}
		}

		function renderAppointments(appointments) {
			const appointmentsList = document.getElementById('appointmentsList');
			appointmentsList.innerHTML = '';

			appointments.forEach(appointment => {
				const appointmentDate = new Date(appointment.startTime);
				const formattedDate = appointmentDate.toLocaleDateString('tr-TR', {
					day: 'numeric',
					month: 'long',
					year: 'numeric'
				});
				const formattedTime = appointmentDate.toLocaleTimeString('tr-TR', {
					hour: '2-digit',
					minute: '2-digit'
				});

				const appointmentCard = document.createElement('div');
				appointmentCard.className = 'appointment-card';
				appointmentCard.innerHTML = `
                <div class="appointment-header">
                    <div class="customer-name">${appointment.customer.name} ${appointment.customer.surname}</div>
                    <div class="appointment-time">${formattedDate} - ${formattedTime}</div>
                </div>
                <div class="appointment-details">
                    <div class="detail-item">
                        <div class="detail-label">Hizmet:</div>
                        <div class="service-name">${appointment.service.name}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">SÃ¼re:</div>
                        <div>${appointment.service.duration} dakika</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Durum:</div>
                        <div>PlanlandÄ±</div>
                    </div>
                </div>
                <button class="cancel-btn" onclick="cancelAppointment('${appointment._id}')" id="cancel-${appointment._id}">
                    Randevuyu Ä°ptal Et
                </button>
            `;

				appointmentsList.appendChild(appointmentCard);
			});
		}

		async function cancelAppointment(appointmentId) {
			const cancelBtn = document.getElementById(`cancel-${appointmentId}`);

			if (!confirm('Bu randevuyu iptal etmek istediÄŸinizden emin misiniz?')) {
				return;
			}

			// Disable button during request
			cancelBtn.disabled = true;
			cancelBtn.textContent = 'Ä°ptal ediliyor...';

			try {
				const response = await fetch(`/api/appointments/${appointmentId}`, {
					method: 'DELETE',
					credentials: 'include'
				});

				if (response.ok) {
					// Remove the appointment card from the UI
					const appointmentCard = cancelBtn.closest('.appointment-card');
					appointmentCard.remove();

					// Check if there are any appointments left
					const remainingAppointments = document.querySelectorAll('.appointment-card');
					if (remainingAppointments.length === 0) {
						document.getElementById('appointmentsList').style.display = 'none';
						document.getElementById('noAppointments').style.display = 'block';
					}

					alert('Randevu baÅŸarÄ±yla iptal edildi.');
				} else {
					const errorData = await response.json();
					alert('Randevu iptal edilirken hata oluÅŸtu: ' + (errorData.message || 'Bilinmeyen hata'));

					// Re-enable button on error
					cancelBtn.disabled = false;
					cancelBtn.textContent = 'Randevuyu Ä°ptal Et';
				}
			} catch (error) {
				console.error('Error canceling appointment:', error);
				alert('Randevu iptal edilirken bir hata oluÅŸtu.');

				// Re-enable button on error
				cancelBtn.disabled = false;
				cancelBtn.textContent = 'Randevuyu Ä°ptal Et';
			}
		}

		async function fetchMyServices() {
			const loading = document.getElementById('servicesLoading');
			const errorMessage = document.getElementById('servicesError');
			const servicesList = document.getElementById('servicesList');
			const noServices = document.getElementById('noServices');

			try {
				const response = await fetch('/api/barbers/me/services', {
					credentials: 'include'
				});

				loading.style.display = 'none';

				if (response.ok) {
					const servicesData = await response.json();
					myServices = servicesData;

					if (servicesData.length > 0) {
						servicesList.style.display = 'grid';
						renderServices(servicesData);
					} else {
						noServices.style.display = 'block';
					}

					// Dropdown'u gÃ¼ncelle (mevcut hizmetler deÄŸiÅŸtiÄŸi iÃ§in)
					populateServiceDropdown();
				} else if (response.status === 401) {
					window.location.href = '/login';
				} else {
					errorMessage.textContent = 'Hizmetler yÃ¼klenirken bir hata oluÅŸtu.';
					errorMessage.style.display = 'block';
				}
			} catch (error) {
				loading.style.display = 'none';
				errorMessage.textContent = 'Hizmetler yÃ¼klenirken bir hata oluÅŸtu.';
				errorMessage.style.display = 'block';
				console.error('Error fetching services:', error);
			}
		}

		function renderServices(services) {
			const servicesList = document.getElementById('servicesList');
			servicesList.innerHTML = '';

			services.forEach((serviceOffered, index) => {
				const service = serviceOffered.service; // Populated service data

				// isActive durumuna gÃ¶re status text ve class belirle
				const statusText = serviceOffered.isActive ? 'Aktif' : 'Deaktif';
				const statusClass = serviceOffered.isActive ? 'active' : 'inactive';

				const serviceCard = document.createElement('div');
				serviceCard.className = 'service-card';
				serviceCard.setAttribute('data-service-id', service._id);
				serviceCard.setAttribute('data-service-index', index);

				serviceCard.innerHTML = `
					<div class="service-header">
						<div class="service-title">${service.name}</div>
						<div class="service-price">${serviceOffered.price}â‚º</div>
					</div>
					<div class="service-info">
						<div class="service-duration">${serviceOffered.duration} dakika</div>
						<div class="service-status ${statusClass}">${statusText}</div>
					</div>
					<div class="service-actions">
						<button class="edit-btn" onclick="openEditServiceModal('${service._id}', ${index})" title="DÃ¼zenle">
							<i class="fas fa-edit"></i> DÃ¼zenle
						</button>
						<div class="toggle-switch-card">
							<input type="checkbox" id="toggle-${service._id}" ${serviceOffered.isActive ? 'checked' : ''} onchange="toggleServiceStatus('${service._id}', ${index})">
							<span class="toggle-slider"></span>
						</div>
					</div>
				`;

				servicesList.appendChild(serviceCard);
			});
		}

		function showAddServiceModal() {
			document.getElementById('addServiceModal').style.display = 'block';
			document.body.style.overflow = 'hidden';
		}

		function hideAddServiceModal() {
			document.getElementById('addServiceModal').style.display = 'none';
			document.body.style.overflow = 'auto';
			// Reset form
			document.getElementById('addServiceForm').reset();
		}

		let currentEditingService = null;

		function openEditServiceModal(serviceId, serviceIndex) {
			const serviceOffered = myServices[serviceIndex];
			const service = serviceOffered.service;
			currentEditingService = serviceOffered;

			// Form alanlarÄ±nÄ± doldur
			document.getElementById('editServiceName').value = service.name;
			document.getElementById('editServicePrice').value = serviceOffered.price;
			document.getElementById('editServiceDuration').value = serviceOffered.duration;

			// Modal'Ä± gÃ¶ster
			document.getElementById('editServiceModal').style.display = 'block';
			document.body.style.overflow = 'hidden';
		}

		async function toggleServiceStatus(serviceId, serviceIndex) {
			try {
				const response = await fetch(`/api/barbers/me/services/${serviceId}/toggle`, {
					method: 'PATCH',
					credentials: 'include'
				});

				if (response.ok) {
					// Update local data
					myServices[serviceIndex].isActive = !myServices[serviceIndex].isActive;

					// Update UI
					await fetchMyServices();

					const statusText = myServices[serviceIndex].isActive ? 'Aktif' : 'Deaktif';
					console.log(`Hizmet durumu gÃ¼ncellendi: ${statusText}`);
				} else {
					const error = await response.json();
					alert('Hizmet durumu gÃ¼ncellenirken hata oluÅŸtu: ' + (error.message || 'Bilinmeyen hata'));

					// Revert toggle state
					const toggle = document.getElementById(`toggle-${serviceId}`);
					if (toggle) {
						toggle.checked = !toggle.checked;
					}
				}
			} catch (error) {
				console.error('Error toggling service status:', error);
				alert('Hizmet durumu gÃ¼ncellenirken bir hata oluÅŸtu.');

				// Revert toggle state
				const toggle = document.getElementById(`toggle-${serviceId}`);
				if (toggle) {
					toggle.checked = !toggle.checked;
				}
			}
		}

		function hideEditServiceModal() {
			document.getElementById('editServiceModal').style.display = 'none';
			document.body.style.overflow = 'auto';
			currentEditingService = null;
			// Reset form
			document.getElementById('editServiceForm').reset();
		}

		async function handleEditServiceSubmit(e) {
			e.preventDefault();

			if (!currentEditingService) {
				alert('DÃ¼zenlenecek hizmet bulunamadÄ±');
				return;
			}

			const price = parseFloat(document.getElementById('editServicePrice').value);
			const duration = parseInt(document.getElementById('editServiceDuration').value);

			// Validation
			if (!price || price <= 0) {
				alert('LÃ¼tfen geÃ§erli bir fiyat girin');
				return;
			}
			if (!duration || duration <= 0) {
				alert('LÃ¼tfen geÃ§erli bir sÃ¼re girin');
				return;
			}

			try {
				// Price ve duration gÃ¼ncellemesi
				const updateResponse = await fetch(`/api/barbers/me/services/${currentEditingService.service._id}`, {
					method: 'PATCH',
					headers: {
						'Content-Type': 'application/json'
					},
					credentials: 'include',
					body: JSON.stringify({
						price: price,
						duration: duration
					})
				});

				if (!updateResponse.ok) {
					const error = await updateResponse.json();
					throw new Error(error.message || 'Hizmet gÃ¼ncellenirken hata oluÅŸtu');
				}

				hideEditServiceModal();
				await fetchMyServices(); // Refresh services list
				alert('Hizmet baÅŸarÄ±yla gÃ¼ncellendi!');

			} catch (error) {
				console.error('Error:', error);
				alert('Hizmet gÃ¼ncellenirken hata oluÅŸtu: ' + error.message);
			}
		}

		// Availability Management Functions
		async function fetchCurrentAvailabilityForEdit() {
			try {
				const response = await fetch('/api/barbers/me/availability', {
					method: 'GET',
					credentials: 'include'
				});

				if (response.ok) {
					const data = await response.json();
					console.log('Availability data for edit:', data); // Debug iÃ§in
					populateAvailabilityForm(data);
					// Re-initialize day cards after populating form to ensure proper states
					setTimeout(() => {
						initializeDayCards();
					}, 100);
				}
			} catch (error) {
				console.error('Error fetching availability for edit:', error);
			}
		}
		async function fetchCurrentAvailabilityForEdit() {
			try {
				const response = await fetch('/api/barbers/me/availability', {
					method: 'GET',
					credentials: 'include'
				});

				if (response.ok) {
					const data = await response.json();
					console.log('Availability data for edit:', data); // Debug iÃ§in
					populateAvailabilityForm(data);
				}
			} catch (error) {
				console.error('Error fetching availability for edit:', error);
			}
		}

		function populateAvailabilityForm(availability) {
			const dayMapping = {
				1: 'monday',
				2: 'tuesday',
				3: 'wednesday',
				4: 'thursday',
				5: 'friday',
				6: 'saturday',
				0: 'sunday'
			};

			// Create availability lookup object
			const availabilityByDay = {};
			if (availability && Array.isArray(availability)) {
				availability.forEach(item => {
					availabilityByDay[item.dayOfWeek] = item;
				});
			}

			// Fill form for each day
			Object.keys(dayMapping).forEach(dayNum => {
				const dayName = dayMapping[dayNum];
				const checkbox = document.getElementById(`${dayName}-enabled`);
				const startInput = document.getElementById(`${dayName}-start`);
				const endInput = document.getElementById(`${dayName}-end`);
				const dayCard = document.querySelector(`[data-day="${dayName}"]`);
				const timeSelector = dayCard?.querySelector('.time-selector');
				const dayStatusSpan = dayCard?.querySelector('.day-status');

				const dayData = availabilityByDay[parseInt(dayNum)];

				if (dayData && dayData.startTime && dayData.endTime) {
					checkbox.checked = true;
					startInput.value = dayData.startTime;
					endInput.value = dayData.endTime;

					// Ensure the day card is active and time selector is visible
					if (dayCard) {
						dayCard.classList.add('active');
						if (timeSelector) timeSelector.classList.remove('hidden');
						if (dayStatusSpan) dayStatusSpan.textContent = 'AÃ§Ä±k';
					}
				} else {
					checkbox.checked = false;
					startInput.value = '';
					endInput.value = '';

					// Ensure the day card is inactive and time selector is hidden
					if (dayCard) {
						dayCard.classList.remove('active');
						if (timeSelector) timeSelector.classList.add('hidden');
						if (dayStatusSpan) dayStatusSpan.textContent = 'KapalÄ±';
					}
				}
			});
		}

		async function handleAvailabilitySubmit(event) {
			event.preventDefault();

			const dayMapping = {
				'monday': 1,
				'tuesday': 2,
				'wednesday': 3,
				'thursday': 4,
				'friday': 5,
				'saturday': 6,
				'sunday': 0
			};

			const availability = [];

			Object.keys(dayMapping).forEach(dayName => {
				const checkbox = document.getElementById(`${dayName}-enabled`);
				const startInput = document.getElementById(`${dayName}-start`);
				const endInput = document.getElementById(`${dayName}-end`);

				if (checkbox.checked && startInput.value && endInput.value) {
					availability.push({
						dayOfWeek: dayMapping[dayName],
						startTime: startInput.value,
						endTime: endInput.value
					});
				}
			});

			try {
				const response = await fetch('/api/barbers/me/availability', {
					method: 'PUT',
					headers: {
						'Content-Type': 'application/json'
					},
					credentials: 'include',
					body: JSON.stringify({
						availability: availability
					})
				});

				if (response.ok) {
					await fetchCurrentAvailabilityForEdit(); // Refresh form data
					alert('Ã‡alÄ±ÅŸma saatleri baÅŸarÄ±yla gÃ¼ncellendi!');
				} else {
					const error = await response.json();
					throw new Error(error.message || 'Ã‡alÄ±ÅŸma saatleri gÃ¼ncellenirken hata oluÅŸtu');
				}
			} catch (error) {
				console.error('Error updating availability:', error);
				alert('Ã‡alÄ±ÅŸma saatleri gÃ¼ncellenirken hata oluÅŸtu: ' + error.message);
			}
		}

		// Add form event listener
		document.getElementById('availabilityForm').addEventListener('submit', handleAvailabilitySubmit);

		// Initialize Flatpickr for modern time pickers
		function initializeTimePickers() {
			const timePickerInputs = document.querySelectorAll('.time-picker');

			timePickerInputs.forEach(input => {
				flatpickr(input, {
					enableTime: true,
					noCalendar: true,
					dateFormat: "H:i",
					time_24hr: true,
					defaultHour: input.dataset.default ? parseInt(input.dataset.default.split(':')[0]) : 9,
					defaultMinute: input.dataset.default ? parseInt(input.dataset.default.split(':')[1]) : 0,
					minuteIncrement: 15,
					locale: "tr",
					theme: "dark"
				});
			});
		}

		// Initialize toggle switches and time selectors
		function initializeDayCards() {
			const dayCards = document.querySelectorAll('.day-card');

			dayCards.forEach(card => {
				const toggle = card.querySelector('.switch input[type="checkbox"]');
				const timeSelector = card.querySelector('.time-selector');
				const dayStatusSpan = card.querySelector('.day-status');

				// Set initial state based on checkbox
				updateDayCardState(card, toggle, timeSelector, dayStatusSpan);

				// Handle toggle changes
				toggle.addEventListener('change', function () {
					updateDayCardState(card, toggle, timeSelector, dayStatusSpan);
				});
			});
		}

		function updateDayCardState(card, toggle, timeSelector, dayStatusSpan) {
			if (toggle.checked) {
				card.classList.add('active');
				timeSelector.classList.remove('hidden');
				dayStatusSpan.textContent = 'AÃ§Ä±k';
			} else {
				card.classList.remove('active');
				timeSelector.classList.add('hidden');
				dayStatusSpan.textContent = 'KapalÄ±';
			}
		}

		// Legacy function for HTML onclick handlers
		function toggleDayCard(dayName) {
			const dayCard = document.querySelector(`[data-day="${dayName}"]`);
			const toggle = document.getElementById(`${dayName}-enabled`);
			const timeSelector = dayCard?.querySelector('.time-selector');
			const dayStatusSpan = dayCard?.querySelector('.day-status');

			if (dayCard && toggle && timeSelector && dayStatusSpan) {
				updateDayCardState(dayCard, toggle, timeSelector, dayStatusSpan);
			}
		}

		// Initialize everything when DOM is ready
		setTimeout(() => {
			initializeTimePickers();
			initializeDayCards();
		}, 500);
	</script>

	<%- include('partials/footer')%>