<%- include('partials/header')%>

	<div class="dashboard-container">
		<div class="container-fluid">
			<div class="dashboard-header">
				<h1 class="dashboard-title">Berber Yönetim Paneli</h1>
				<div class="welcome-message">
					<span id="welcomeMessage">Hoş geldiniz!</span>
				</div>
			</div>

			<!-- Appointments Section -->
			<div class="appointments-section">
				<h2 class="section-title">Yaklaşan Randevularım</h2>

				<!-- Loading Spinner -->
				<div id="appointmentsLoading" class="text-center">
					<div class="spinner-border" role="status">
						<span class="sr-only">Yükleniyor...</span>
					</div>
				</div>

				<!-- Error Message -->
				<div id="appointmentsError" class="error-message" style="display: none;"></div>

				<!-- Appointments List -->
				<div id="appointmentsList" class="appointments-list" style="display: none;">
					<!-- Appointments will be inserted here -->
				</div>

				<!-- No Appointments Message -->
				<div id="noAppointments" class="no-appointments" style="display: none;">
					<p>Henüz randevunuz bulunmamaktadır.</p>
				</div>
			</div>
		</div>
	</div>

	<style>
		.dashboard-container {
			background-color: #1a1a1a;
			min-height: 100vh;
			padding: 60px 0;
		}

		.dashboard-header {
			display: flex;
			justify-content: space-between;
			align-items: center;
			margin-bottom: 40px;
			padding: 0 40px;
		}

		.dashboard-title {
			color: #8bc34a;
			font-size: 36px;
			font-weight: 600;
			margin: 0;
		}

		.welcome-message {
			color: #ffffff;
			font-size: 18px;
		}

		.appointments-section {
			padding: 0 40px;
		}

		.section-title {
			color: #ffffff;
			font-size: 24px;
			font-weight: 600;
			margin-bottom: 30px;
		}

		.appointments-list {
			display: flex;
			flex-direction: column;
			gap: 20px;
		}

		.appointment-card {
			background: #2d2d2d;
			border-radius: 12px;
			padding: 25px;
			border: 1px solid #4a4a4a;
			transition: transform 0.3s ease, box-shadow 0.3s ease;
		}

		.appointment-card:hover {
			transform: translateY(-2px);
			box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
		}

		.appointment-header {
			display: flex;
			justify-content: space-between;
			align-items: center;
			margin-bottom: 15px;
		}

		.customer-name {
			color: #8bc34a;
			font-size: 20px;
			font-weight: 600;
		}

		.appointment-time {
			color: #ffffff;
			font-size: 16px;
			font-weight: 500;
		}

		.appointment-details {
			display: grid;
			grid-template-columns: 1fr 1fr 1fr;
			gap: 20px;
			margin-top: 15px;
		}

		.detail-item {
			color: #b0b0b0;
		}

		.detail-label {
			font-weight: 600;
			color: #ffffff;
			margin-bottom: 5px;
		}

		.service-name {
			color: #8bc34a;
			font-weight: 600;
		}

		.cancel-btn {
			background: #ff4444;
			color: white;
			border: none;
			padding: 8px 16px;
			border-radius: 6px;
			font-size: 14px;
			font-weight: 500;
			cursor: pointer;
			transition: background-color 0.3s ease;
			margin-top: 15px;
		}

		.cancel-btn:hover {
			background: #ff3333;
		}

		.cancel-btn:disabled {
			background: #666;
			cursor: not-allowed;
		}

		.error-message {
			background: #ff4444;
			color: white;
			padding: 15px;
			border-radius: 8px;
			text-align: center;
			margin: 20px 0;
		}

		.no-appointments {
			text-align: center;
			padding: 60px 20px;
			color: #b0b0b0;
			font-size: 18px;
		}

		.spinner-border {
			color: #8bc34a;
		}

		/* Responsive design */
		@media (max-width: 768px) {
			.dashboard-header {
				flex-direction: column;
				text-align: center;
				gap: 15px;
				padding: 0 20px;
			}

			.dashboard-title {
				font-size: 28px;
			}

			.appointments-section {
				padding: 0 20px;
			}

			.appointment-details {
				grid-template-columns: 1fr;
				gap: 10px;
			}

			.appointment-card {
				padding: 20px;
			}
		}
	</style>

	<script>
		document.addEventListener('DOMContentLoaded', async function () {
			// Check if user is authenticated and is a barber
			const isAuthenticated = await checkUserAuthentication();
			if (!isAuthenticated) {
				window.location.href = '/login';
				return;
			}

			// Fetch barber's appointments
			fetchMyAppointments();
		});

		async function checkUserAuthentication() {
			try {
				const response = await fetch('/profile/me', {
					credentials: 'include'
				});

				if (response.ok) {
					const userData = await response.json();
					if (userData.role === 'barber') {
						document.getElementById('welcomeMessage').textContent =
							`Hoş geldiniz, ${userData.name} ${userData.surname}!`;
						return true;
					} else {
						alert('Bu sayfaya erişim yetkiniz yok. Sadece berberler bu paneli kullanabilir.');
						window.location.href = '/';
						return false;
					}
				}
				return false;
			} catch (error) {
				console.error('Authentication check failed:', error);
				return false;
			}
		}

		async function fetchMyAppointments() {
			const loading = document.getElementById('appointmentsLoading');
			const errorMessage = document.getElementById('appointmentsError');
			const appointmentsList = document.getElementById('appointmentsList');
			const noAppointments = document.getElementById('noAppointments');

			try {
				const response = await fetch('/api/appointments/my-appointments', {
					credentials: 'include'
				});

				loading.style.display = 'none';

				if (response.ok) {
					const appointments = await response.json();

					if (appointments.length > 0) {
						appointmentsList.style.display = 'block';
						renderAppointments(appointments);
					} else {
						noAppointments.style.display = 'block';
					}
				} else if (response.status === 401) {
					window.location.href = '/login';
				} else {
					errorMessage.textContent = 'Randevular yüklenirken bir hata oluştu.';
					errorMessage.style.display = 'block';
				}
			} catch (error) {
				loading.style.display = 'none';
				errorMessage.textContent = 'Randevular yüklenirken bir hata oluştu.';
				errorMessage.style.display = 'block';
				console.error('Error fetching appointments:', error);
			}
		}

		function renderAppointments(appointments) {
			const appointmentsList = document.getElementById('appointmentsList');
			appointmentsList.innerHTML = '';

			appointments.forEach(appointment => {
				const appointmentDate = new Date(appointment.startTime);
				const formattedDate = appointmentDate.toLocaleDateString('tr-TR', {
					day: 'numeric',
					month: 'long',
					year: 'numeric'
				});
				const formattedTime = appointmentDate.toLocaleTimeString('tr-TR', {
					hour: '2-digit',
					minute: '2-digit'
				});

				const appointmentCard = document.createElement('div');
				appointmentCard.className = 'appointment-card';
				appointmentCard.innerHTML = `
                <div class="appointment-header">
                    <div class="customer-name">${appointment.customer.name} ${appointment.customer.surname}</div>
                    <div class="appointment-time">${formattedDate} - ${formattedTime}</div>
                </div>
                <div class="appointment-details">
                    <div class="detail-item">
                        <div class="detail-label">Hizmet:</div>
                        <div class="service-name">${appointment.service.name}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Süre:</div>
                        <div>${appointment.service.duration} dakika</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Durum:</div>
                        <div>Planlandı</div>
                    </div>
                </div>
                <button class="cancel-btn" onclick="cancelAppointment('${appointment._id}')" id="cancel-${appointment._id}">
                    Randevuyu İptal Et
                </button>
            `;

				appointmentsList.appendChild(appointmentCard);
			});
		}

		async function cancelAppointment(appointmentId) {
			const cancelBtn = document.getElementById(`cancel-${appointmentId}`);

			if (!confirm('Bu randevuyu iptal etmek istediğinizden emin misiniz?')) {
				return;
			}

			// Disable button during request
			cancelBtn.disabled = true;
			cancelBtn.textContent = 'İptal ediliyor...';

			try {
				const response = await fetch(`/api/appointments/${appointmentId}`, {
					method: 'DELETE',
					credentials: 'include'
				});

				if (response.ok) {
					// Remove the appointment card from the UI
					const appointmentCard = cancelBtn.closest('.appointment-card');
					appointmentCard.remove();

					// Check if there are any appointments left
					const remainingAppointments = document.querySelectorAll('.appointment-card');
					if (remainingAppointments.length === 0) {
						document.getElementById('appointmentsList').style.display = 'none';
						document.getElementById('noAppointments').style.display = 'block';
					}

					alert('Randevu başarıyla iptal edildi.');
				} else {
					const errorData = await response.json();
					alert('Randevu iptal edilirken hata oluştu: ' + (errorData.message || 'Bilinmeyen hata'));

					// Re-enable button on error
					cancelBtn.disabled = false;
					cancelBtn.textContent = 'Randevuyu İptal Et';
				}
			} catch (error) {
				console.error('Error canceling appointment:', error);
				alert('Randevu iptal edilirken bir hata oluştu.');

				// Re-enable button on error
				cancelBtn.disabled = false;
				cancelBtn.textContent = 'Randevuyu İptal Et';
			}
		}
	</script>

	<%- include('partials/footer')%>